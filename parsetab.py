
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSNAME NUMBER STRING LINE_COMMENT INPUT PRINT IF ELSEstatement : NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : NUMBERexpression : STRINGexpression : LINE_COMMENTexpression : INPUTexpression : PRINTexpression : IFexpression : ELSEexpression : NAME'
    
_lr_action_items = {'NAME':([0,4,5,13,14,15,16,17,],[2,19,19,19,19,19,19,19,]),'-':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[4,-16,15,4,4,-9,-10,-11,-12,-13,-14,-15,4,4,4,4,4,-7,-16,15,15,-3,-4,-5,-6,-8,]),'(':([0,4,5,13,14,15,16,17,],[5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,13,14,15,16,17,],[6,6,6,6,6,6,6,6,]),'STRING':([0,4,5,13,14,15,16,17,],[7,7,7,7,7,7,7,7,]),'LINE_COMMENT':([0,4,5,13,14,15,16,17,],[8,8,8,8,8,8,8,8,]),'INPUT':([0,4,5,13,14,15,16,17,],[9,9,9,9,9,9,9,9,]),'PRINT':([0,4,5,13,14,15,16,17,],[10,10,10,10,10,10,10,10,]),'IF':([0,4,5,13,14,15,16,17,],[11,11,11,11,11,11,11,11,]),'ELSE':([0,4,5,13,14,15,16,17,],[12,12,12,12,12,12,12,12,]),'$end':([1,2,3,6,7,8,9,10,11,12,18,19,21,22,23,24,25,26,],[0,-16,-2,-9,-10,-11,-12,-13,-14,-15,-7,-16,-1,-3,-4,-5,-6,-8,]),'=':([2,],[13,]),'+':([2,3,6,7,8,9,10,11,12,18,19,20,21,22,23,24,25,26,],[-16,14,-9,-10,-11,-12,-13,-14,-15,-7,-16,14,14,-3,-4,-5,-6,-8,]),'*':([2,3,6,7,8,9,10,11,12,18,19,20,21,22,23,24,25,26,],[-16,16,-9,-10,-11,-12,-13,-14,-15,-7,-16,16,16,16,16,-5,-6,-8,]),'/':([2,3,6,7,8,9,10,11,12,18,19,20,21,22,23,24,25,26,],[-16,17,-9,-10,-11,-12,-13,-14,-15,-7,-16,17,17,17,17,-5,-6,-8,]),')':([6,7,8,9,10,11,12,18,19,20,22,23,24,25,26,],[-9,-10,-11,-12,-13,-14,-15,-7,-16,26,-3,-4,-5,-6,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,13,14,15,16,17,],[3,18,20,21,22,23,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','pythonInterpreter.py',82),
  ('statement -> expression','statement',1,'p_statement_expr','pythonInterpreter.py',87),
  ('expression -> expression + expression','expression',3,'p_expression_binop','pythonInterpreter.py',92),
  ('expression -> expression - expression','expression',3,'p_expression_binop','pythonInterpreter.py',93),
  ('expression -> expression * expression','expression',3,'p_expression_binop','pythonInterpreter.py',94),
  ('expression -> expression / expression','expression',3,'p_expression_binop','pythonInterpreter.py',95),
  ('expression -> - expression','expression',2,'p_expression_uminus','pythonInterpreter.py',107),
  ('expression -> ( expression )','expression',3,'p_expression_group','pythonInterpreter.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_number','pythonInterpreter.py',117),
  ('expression -> STRING','expression',1,'p_expression_string','pythonInterpreter.py',121),
  ('expression -> LINE_COMMENT','expression',1,'p_expression_line_comment','pythonInterpreter.py',125),
  ('expression -> INPUT','expression',1,'p_expression_input','pythonInterpreter.py',128),
  ('expression -> PRINT','expression',1,'p_expression_print','pythonInterpreter.py',132),
  ('expression -> IF','expression',1,'p_expression_if','pythonInterpreter.py',136),
  ('expression -> ELSE','expression',1,'p_expression_else','pythonInterpreter.py',140),
  ('expression -> NAME','expression',1,'p_expression_name','pythonInterpreter.py',144),
]
