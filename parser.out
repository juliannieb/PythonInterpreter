Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    POINT

Grammar

Rule 0     S' -> suite
Rule 1     suite -> stmt
Rule 2     suite -> stmt suite
Rule 3     stmt -> exprStmt
Rule 4     stmt -> declar
Rule 5     stmt -> selectionStmt
Rule 6     stmt -> iterationStmt
Rule 7     stmt -> returnStmt SEMCOL
Rule 8     stmt -> inputStmt SEMCOL
Rule 9     stmt -> outputStmt SEMCOL
Rule 10    stmt -> commentLine
Rule 11    declar -> varDeclar SEMCOL
Rule 12    declar -> funcDeclar
Rule 13    declar -> objDeclar
Rule 14    varDeclar -> NAME ASSIGN STRING
Rule 15    varDeclar -> NAME ASSIGN NUMBER
Rule 16    varDeclar -> NAME ASSIGN NAME
Rule 17    varDeclar -> NAME ASSIGN objConstruct
Rule 18    funcDeclar -> DEF NAME LPARENT RPARENT COL suite
Rule 19    funcDeclar -> DEF NAME LPARENT params RPARENT COL suite
Rule 20    params -> paramsList
Rule 21    paramsList -> NAME COMA paramsList
Rule 22    paramsList -> NAME
Rule 23    objDeclar -> CLASS NAME COL suite
Rule 24    objConstruct -> NAME LPARENT params RPARENT
Rule 25    exprStmt -> simpleExpr
Rule 26    selectionStmt -> IF simpleExpr COL suite
Rule 27    selectionStmt -> IF simpleExpr COL suite ELSE COL suite
Rule 28    iterationStmt -> WHILE simpleExpr COL suite
Rule 29    returnStmt -> RETURN
Rule 30    returnStmt -> RETURN simpleExpr
Rule 31    simpleExpr -> simpleExpr OR andExpr
Rule 32    simpleExpr -> andExpr
Rule 33    andExpr -> andExpr AND unaryRelExpr
Rule 34    andExpr -> unaryRelExpr
Rule 35    unaryRelExpr -> NOT unaryRelExpr
Rule 36    unaryRelExpr -> relExpr
Rule 37    relExpr -> sumExpr relop sumExpr
Rule 38    relExpr -> sumExpr
Rule 39    relop -> LTE
Rule 40    relop -> LT
Rule 41    relop -> GTE
Rule 42    relop -> GT
Rule 43    relop -> EQ
Rule 44    relop -> NEQ
Rule 45    sumExpr -> sumExpr sumop term
Rule 46    sumExpr -> term
Rule 47    sumop -> SUM
Rule 48    sumop -> SUBST
Rule 49    term -> term mulop opElement
Rule 50    term -> opElement
Rule 51    opElement -> NAME
Rule 52    opElement -> NUMBER
Rule 53    mulop -> PROD
Rule 54    mulop -> DIV
Rule 55    inputStmt -> INPUT LPARENT RPARENT
Rule 56    outputStmt -> PRINT LPARENT STRING RPARENT
Rule 57    commentLine -> LINE_COMMENT

Terminals, with rules where they appear

AND                  : 33
ASSIGN               : 14 15 16 17
CLASS                : 23
COL                  : 18 19 23 26 27 27 28
COMA                 : 21
DEF                  : 18 19
DIV                  : 54
ELSE                 : 27
EQ                   : 43
GT                   : 42
GTE                  : 41
IF                   : 26 27
INPUT                : 55
LINE_COMMENT         : 57
LPARENT              : 18 19 24 55 56
LT                   : 40
LTE                  : 39
NAME                 : 14 15 16 16 17 18 19 21 22 23 24 51
NEQ                  : 44
NOT                  : 35
NUMBER               : 15 52
OR                   : 31
POINT                : 
PRINT                : 56
PROD                 : 53
RETURN               : 29 30
RPARENT              : 18 19 24 55 56
SEMCOL               : 7 8 9 11
STRING               : 14 56
SUBST                : 48
SUM                  : 47
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

andExpr              : 31 32 33
commentLine          : 10
declar               : 4
exprStmt             : 3
funcDeclar           : 12
inputStmt            : 8
iterationStmt        : 6
mulop                : 49
objConstruct         : 17
objDeclar            : 13
opElement            : 49 50
outputStmt           : 9
params               : 19 24
paramsList           : 20 21
relExpr              : 36
relop                : 37
returnStmt           : 7
selectionStmt        : 5
simpleExpr           : 25 26 27 28 30 31
stmt                 : 1 2
suite                : 2 18 19 23 26 27 27 28 0
sumExpr              : 37 37 38 45
sumop                : 45
term                 : 45 46 49
unaryRelExpr         : 33 34 35
varDeclar            : 11

Parsing method: LALR

state 0

    (0) S' -> . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    suite                          shift and go to state 1
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    simpleExpr                     shift and go to state 11
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 1

    (0) S' -> suite .



state 2

    (1) suite -> stmt .
    (2) suite -> stmt . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LINE_COMMENT resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 1 (suite -> stmt .)
    ELSE            reduce using rule 1 (suite -> stmt .)
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

  ! IF              [ reduce using rule 1 (suite -> stmt .) ]
  ! WHILE           [ reduce using rule 1 (suite -> stmt .) ]
  ! RETURN          [ reduce using rule 1 (suite -> stmt .) ]
  ! INPUT           [ reduce using rule 1 (suite -> stmt .) ]
  ! PRINT           [ reduce using rule 1 (suite -> stmt .) ]
  ! LINE_COMMENT    [ reduce using rule 1 (suite -> stmt .) ]
  ! NAME            [ reduce using rule 1 (suite -> stmt .) ]
  ! DEF             [ reduce using rule 1 (suite -> stmt .) ]
  ! CLASS           [ reduce using rule 1 (suite -> stmt .) ]
  ! NOT             [ reduce using rule 1 (suite -> stmt .) ]
  ! NUMBER          [ reduce using rule 1 (suite -> stmt .) ]

    stmt                           shift and go to state 2
    suite                          shift and go to state 32
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    simpleExpr                     shift and go to state 11
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 3

    (3) stmt -> exprStmt .

    IF              reduce using rule 3 (stmt -> exprStmt .)
    WHILE           reduce using rule 3 (stmt -> exprStmt .)
    RETURN          reduce using rule 3 (stmt -> exprStmt .)
    INPUT           reduce using rule 3 (stmt -> exprStmt .)
    PRINT           reduce using rule 3 (stmt -> exprStmt .)
    LINE_COMMENT    reduce using rule 3 (stmt -> exprStmt .)
    NAME            reduce using rule 3 (stmt -> exprStmt .)
    DEF             reduce using rule 3 (stmt -> exprStmt .)
    CLASS           reduce using rule 3 (stmt -> exprStmt .)
    NOT             reduce using rule 3 (stmt -> exprStmt .)
    NUMBER          reduce using rule 3 (stmt -> exprStmt .)
    $end            reduce using rule 3 (stmt -> exprStmt .)
    ELSE            reduce using rule 3 (stmt -> exprStmt .)


state 4

    (4) stmt -> declar .

    IF              reduce using rule 4 (stmt -> declar .)
    WHILE           reduce using rule 4 (stmt -> declar .)
    RETURN          reduce using rule 4 (stmt -> declar .)
    INPUT           reduce using rule 4 (stmt -> declar .)
    PRINT           reduce using rule 4 (stmt -> declar .)
    LINE_COMMENT    reduce using rule 4 (stmt -> declar .)
    NAME            reduce using rule 4 (stmt -> declar .)
    DEF             reduce using rule 4 (stmt -> declar .)
    CLASS           reduce using rule 4 (stmt -> declar .)
    NOT             reduce using rule 4 (stmt -> declar .)
    NUMBER          reduce using rule 4 (stmt -> declar .)
    $end            reduce using rule 4 (stmt -> declar .)
    ELSE            reduce using rule 4 (stmt -> declar .)


state 5

    (5) stmt -> selectionStmt .

    IF              reduce using rule 5 (stmt -> selectionStmt .)
    WHILE           reduce using rule 5 (stmt -> selectionStmt .)
    RETURN          reduce using rule 5 (stmt -> selectionStmt .)
    INPUT           reduce using rule 5 (stmt -> selectionStmt .)
    PRINT           reduce using rule 5 (stmt -> selectionStmt .)
    LINE_COMMENT    reduce using rule 5 (stmt -> selectionStmt .)
    NAME            reduce using rule 5 (stmt -> selectionStmt .)
    DEF             reduce using rule 5 (stmt -> selectionStmt .)
    CLASS           reduce using rule 5 (stmt -> selectionStmt .)
    NOT             reduce using rule 5 (stmt -> selectionStmt .)
    NUMBER          reduce using rule 5 (stmt -> selectionStmt .)
    $end            reduce using rule 5 (stmt -> selectionStmt .)
    ELSE            reduce using rule 5 (stmt -> selectionStmt .)


state 6

    (6) stmt -> iterationStmt .

    IF              reduce using rule 6 (stmt -> iterationStmt .)
    WHILE           reduce using rule 6 (stmt -> iterationStmt .)
    RETURN          reduce using rule 6 (stmt -> iterationStmt .)
    INPUT           reduce using rule 6 (stmt -> iterationStmt .)
    PRINT           reduce using rule 6 (stmt -> iterationStmt .)
    LINE_COMMENT    reduce using rule 6 (stmt -> iterationStmt .)
    NAME            reduce using rule 6 (stmt -> iterationStmt .)
    DEF             reduce using rule 6 (stmt -> iterationStmt .)
    CLASS           reduce using rule 6 (stmt -> iterationStmt .)
    NOT             reduce using rule 6 (stmt -> iterationStmt .)
    NUMBER          reduce using rule 6 (stmt -> iterationStmt .)
    $end            reduce using rule 6 (stmt -> iterationStmt .)
    ELSE            reduce using rule 6 (stmt -> iterationStmt .)


state 7

    (7) stmt -> returnStmt . SEMCOL

    SEMCOL          shift and go to state 33


state 8

    (8) stmt -> inputStmt . SEMCOL

    SEMCOL          shift and go to state 34


state 9

    (9) stmt -> outputStmt . SEMCOL

    SEMCOL          shift and go to state 35


state 10

    (10) stmt -> commentLine .

    IF              reduce using rule 10 (stmt -> commentLine .)
    WHILE           reduce using rule 10 (stmt -> commentLine .)
    RETURN          reduce using rule 10 (stmt -> commentLine .)
    INPUT           reduce using rule 10 (stmt -> commentLine .)
    PRINT           reduce using rule 10 (stmt -> commentLine .)
    LINE_COMMENT    reduce using rule 10 (stmt -> commentLine .)
    NAME            reduce using rule 10 (stmt -> commentLine .)
    DEF             reduce using rule 10 (stmt -> commentLine .)
    CLASS           reduce using rule 10 (stmt -> commentLine .)
    NOT             reduce using rule 10 (stmt -> commentLine .)
    NUMBER          reduce using rule 10 (stmt -> commentLine .)
    $end            reduce using rule 10 (stmt -> commentLine .)
    ELSE            reduce using rule 10 (stmt -> commentLine .)


state 11

    (25) exprStmt -> simpleExpr .
    (31) simpleExpr -> simpleExpr . OR andExpr

    IF              reduce using rule 25 (exprStmt -> simpleExpr .)
    WHILE           reduce using rule 25 (exprStmt -> simpleExpr .)
    RETURN          reduce using rule 25 (exprStmt -> simpleExpr .)
    INPUT           reduce using rule 25 (exprStmt -> simpleExpr .)
    PRINT           reduce using rule 25 (exprStmt -> simpleExpr .)
    LINE_COMMENT    reduce using rule 25 (exprStmt -> simpleExpr .)
    NAME            reduce using rule 25 (exprStmt -> simpleExpr .)
    DEF             reduce using rule 25 (exprStmt -> simpleExpr .)
    CLASS           reduce using rule 25 (exprStmt -> simpleExpr .)
    NOT             reduce using rule 25 (exprStmt -> simpleExpr .)
    NUMBER          reduce using rule 25 (exprStmt -> simpleExpr .)
    $end            reduce using rule 25 (exprStmt -> simpleExpr .)
    ELSE            reduce using rule 25 (exprStmt -> simpleExpr .)
    OR              shift and go to state 36


state 12

    (11) declar -> varDeclar . SEMCOL

    SEMCOL          shift and go to state 37


state 13

    (12) declar -> funcDeclar .

    IF              reduce using rule 12 (declar -> funcDeclar .)
    WHILE           reduce using rule 12 (declar -> funcDeclar .)
    RETURN          reduce using rule 12 (declar -> funcDeclar .)
    INPUT           reduce using rule 12 (declar -> funcDeclar .)
    PRINT           reduce using rule 12 (declar -> funcDeclar .)
    LINE_COMMENT    reduce using rule 12 (declar -> funcDeclar .)
    NAME            reduce using rule 12 (declar -> funcDeclar .)
    DEF             reduce using rule 12 (declar -> funcDeclar .)
    CLASS           reduce using rule 12 (declar -> funcDeclar .)
    NOT             reduce using rule 12 (declar -> funcDeclar .)
    NUMBER          reduce using rule 12 (declar -> funcDeclar .)
    $end            reduce using rule 12 (declar -> funcDeclar .)
    ELSE            reduce using rule 12 (declar -> funcDeclar .)


state 14

    (13) declar -> objDeclar .

    IF              reduce using rule 13 (declar -> objDeclar .)
    WHILE           reduce using rule 13 (declar -> objDeclar .)
    RETURN          reduce using rule 13 (declar -> objDeclar .)
    INPUT           reduce using rule 13 (declar -> objDeclar .)
    PRINT           reduce using rule 13 (declar -> objDeclar .)
    LINE_COMMENT    reduce using rule 13 (declar -> objDeclar .)
    NAME            reduce using rule 13 (declar -> objDeclar .)
    DEF             reduce using rule 13 (declar -> objDeclar .)
    CLASS           reduce using rule 13 (declar -> objDeclar .)
    NOT             reduce using rule 13 (declar -> objDeclar .)
    NUMBER          reduce using rule 13 (declar -> objDeclar .)
    $end            reduce using rule 13 (declar -> objDeclar .)
    ELSE            reduce using rule 13 (declar -> objDeclar .)


state 15

    (26) selectionStmt -> IF . simpleExpr COL suite
    (27) selectionStmt -> IF . simpleExpr COL suite ELSE COL suite
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NOT             shift and go to state 27
    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    simpleExpr                     shift and go to state 38
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 16

    (28) iterationStmt -> WHILE . simpleExpr COL suite
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NOT             shift and go to state 27
    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    simpleExpr                     shift and go to state 40
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 17

    (29) returnStmt -> RETURN .
    (30) returnStmt -> RETURN . simpleExpr
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    SEMCOL          reduce using rule 29 (returnStmt -> RETURN .)
    NOT             shift and go to state 27
    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    simpleExpr                     shift and go to state 41
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 18

    (55) inputStmt -> INPUT . LPARENT RPARENT

    LPARENT         shift and go to state 42


state 19

    (56) outputStmt -> PRINT . LPARENT STRING RPARENT

    LPARENT         shift and go to state 43


state 20

    (57) commentLine -> LINE_COMMENT .

    IF              reduce using rule 57 (commentLine -> LINE_COMMENT .)
    WHILE           reduce using rule 57 (commentLine -> LINE_COMMENT .)
    RETURN          reduce using rule 57 (commentLine -> LINE_COMMENT .)
    INPUT           reduce using rule 57 (commentLine -> LINE_COMMENT .)
    PRINT           reduce using rule 57 (commentLine -> LINE_COMMENT .)
    LINE_COMMENT    reduce using rule 57 (commentLine -> LINE_COMMENT .)
    NAME            reduce using rule 57 (commentLine -> LINE_COMMENT .)
    DEF             reduce using rule 57 (commentLine -> LINE_COMMENT .)
    CLASS           reduce using rule 57 (commentLine -> LINE_COMMENT .)
    NOT             reduce using rule 57 (commentLine -> LINE_COMMENT .)
    NUMBER          reduce using rule 57 (commentLine -> LINE_COMMENT .)
    $end            reduce using rule 57 (commentLine -> LINE_COMMENT .)
    ELSE            reduce using rule 57 (commentLine -> LINE_COMMENT .)


state 21

    (32) simpleExpr -> andExpr .
    (33) andExpr -> andExpr . AND unaryRelExpr

    OR              reduce using rule 32 (simpleExpr -> andExpr .)
    IF              reduce using rule 32 (simpleExpr -> andExpr .)
    WHILE           reduce using rule 32 (simpleExpr -> andExpr .)
    RETURN          reduce using rule 32 (simpleExpr -> andExpr .)
    INPUT           reduce using rule 32 (simpleExpr -> andExpr .)
    PRINT           reduce using rule 32 (simpleExpr -> andExpr .)
    LINE_COMMENT    reduce using rule 32 (simpleExpr -> andExpr .)
    NAME            reduce using rule 32 (simpleExpr -> andExpr .)
    DEF             reduce using rule 32 (simpleExpr -> andExpr .)
    CLASS           reduce using rule 32 (simpleExpr -> andExpr .)
    NOT             reduce using rule 32 (simpleExpr -> andExpr .)
    NUMBER          reduce using rule 32 (simpleExpr -> andExpr .)
    $end            reduce using rule 32 (simpleExpr -> andExpr .)
    ELSE            reduce using rule 32 (simpleExpr -> andExpr .)
    COL             reduce using rule 32 (simpleExpr -> andExpr .)
    SEMCOL          reduce using rule 32 (simpleExpr -> andExpr .)
    AND             shift and go to state 44


state 22

    (14) varDeclar -> NAME . ASSIGN STRING
    (15) varDeclar -> NAME . ASSIGN NUMBER
    (16) varDeclar -> NAME . ASSIGN NAME
    (17) varDeclar -> NAME . ASSIGN objConstruct
    (51) opElement -> NAME .

    ASSIGN          shift and go to state 45
    PROD            reduce using rule 51 (opElement -> NAME .)
    DIV             reduce using rule 51 (opElement -> NAME .)
    LTE             reduce using rule 51 (opElement -> NAME .)
    LT              reduce using rule 51 (opElement -> NAME .)
    GTE             reduce using rule 51 (opElement -> NAME .)
    GT              reduce using rule 51 (opElement -> NAME .)
    EQ              reduce using rule 51 (opElement -> NAME .)
    NEQ             reduce using rule 51 (opElement -> NAME .)
    SUM             reduce using rule 51 (opElement -> NAME .)
    SUBST           reduce using rule 51 (opElement -> NAME .)
    AND             reduce using rule 51 (opElement -> NAME .)
    OR              reduce using rule 51 (opElement -> NAME .)
    IF              reduce using rule 51 (opElement -> NAME .)
    WHILE           reduce using rule 51 (opElement -> NAME .)
    RETURN          reduce using rule 51 (opElement -> NAME .)
    INPUT           reduce using rule 51 (opElement -> NAME .)
    PRINT           reduce using rule 51 (opElement -> NAME .)
    LINE_COMMENT    reduce using rule 51 (opElement -> NAME .)
    NAME            reduce using rule 51 (opElement -> NAME .)
    DEF             reduce using rule 51 (opElement -> NAME .)
    CLASS           reduce using rule 51 (opElement -> NAME .)
    NOT             reduce using rule 51 (opElement -> NAME .)
    NUMBER          reduce using rule 51 (opElement -> NAME .)
    $end            reduce using rule 51 (opElement -> NAME .)
    ELSE            reduce using rule 51 (opElement -> NAME .)


state 23

    (52) opElement -> NUMBER .

    PROD            reduce using rule 52 (opElement -> NUMBER .)
    DIV             reduce using rule 52 (opElement -> NUMBER .)
    LTE             reduce using rule 52 (opElement -> NUMBER .)
    LT              reduce using rule 52 (opElement -> NUMBER .)
    GTE             reduce using rule 52 (opElement -> NUMBER .)
    GT              reduce using rule 52 (opElement -> NUMBER .)
    EQ              reduce using rule 52 (opElement -> NUMBER .)
    NEQ             reduce using rule 52 (opElement -> NUMBER .)
    SUM             reduce using rule 52 (opElement -> NUMBER .)
    SUBST           reduce using rule 52 (opElement -> NUMBER .)
    AND             reduce using rule 52 (opElement -> NUMBER .)
    OR              reduce using rule 52 (opElement -> NUMBER .)
    IF              reduce using rule 52 (opElement -> NUMBER .)
    WHILE           reduce using rule 52 (opElement -> NUMBER .)
    RETURN          reduce using rule 52 (opElement -> NUMBER .)
    INPUT           reduce using rule 52 (opElement -> NUMBER .)
    PRINT           reduce using rule 52 (opElement -> NUMBER .)
    LINE_COMMENT    reduce using rule 52 (opElement -> NUMBER .)
    NAME            reduce using rule 52 (opElement -> NUMBER .)
    DEF             reduce using rule 52 (opElement -> NUMBER .)
    CLASS           reduce using rule 52 (opElement -> NUMBER .)
    NOT             reduce using rule 52 (opElement -> NUMBER .)
    NUMBER          reduce using rule 52 (opElement -> NUMBER .)
    $end            reduce using rule 52 (opElement -> NUMBER .)
    ELSE            reduce using rule 52 (opElement -> NUMBER .)
    COL             reduce using rule 52 (opElement -> NUMBER .)
    SEMCOL          reduce using rule 52 (opElement -> NUMBER .)


state 24

    (18) funcDeclar -> DEF . NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> DEF . NAME LPARENT params RPARENT COL suite

    NAME            shift and go to state 46


state 25

    (23) objDeclar -> CLASS . NAME COL suite

    NAME            shift and go to state 47


state 26

    (34) andExpr -> unaryRelExpr .

    AND             reduce using rule 34 (andExpr -> unaryRelExpr .)
    OR              reduce using rule 34 (andExpr -> unaryRelExpr .)
    IF              reduce using rule 34 (andExpr -> unaryRelExpr .)
    WHILE           reduce using rule 34 (andExpr -> unaryRelExpr .)
    RETURN          reduce using rule 34 (andExpr -> unaryRelExpr .)
    INPUT           reduce using rule 34 (andExpr -> unaryRelExpr .)
    PRINT           reduce using rule 34 (andExpr -> unaryRelExpr .)
    LINE_COMMENT    reduce using rule 34 (andExpr -> unaryRelExpr .)
    NAME            reduce using rule 34 (andExpr -> unaryRelExpr .)
    DEF             reduce using rule 34 (andExpr -> unaryRelExpr .)
    CLASS           reduce using rule 34 (andExpr -> unaryRelExpr .)
    NOT             reduce using rule 34 (andExpr -> unaryRelExpr .)
    NUMBER          reduce using rule 34 (andExpr -> unaryRelExpr .)
    $end            reduce using rule 34 (andExpr -> unaryRelExpr .)
    ELSE            reduce using rule 34 (andExpr -> unaryRelExpr .)
    COL             reduce using rule 34 (andExpr -> unaryRelExpr .)
    SEMCOL          reduce using rule 34 (andExpr -> unaryRelExpr .)


state 27

    (35) unaryRelExpr -> NOT . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NOT             shift and go to state 27
    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    unaryRelExpr                   shift and go to state 48
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 28

    (36) unaryRelExpr -> relExpr .

    AND             reduce using rule 36 (unaryRelExpr -> relExpr .)
    OR              reduce using rule 36 (unaryRelExpr -> relExpr .)
    IF              reduce using rule 36 (unaryRelExpr -> relExpr .)
    WHILE           reduce using rule 36 (unaryRelExpr -> relExpr .)
    RETURN          reduce using rule 36 (unaryRelExpr -> relExpr .)
    INPUT           reduce using rule 36 (unaryRelExpr -> relExpr .)
    PRINT           reduce using rule 36 (unaryRelExpr -> relExpr .)
    LINE_COMMENT    reduce using rule 36 (unaryRelExpr -> relExpr .)
    NAME            reduce using rule 36 (unaryRelExpr -> relExpr .)
    DEF             reduce using rule 36 (unaryRelExpr -> relExpr .)
    CLASS           reduce using rule 36 (unaryRelExpr -> relExpr .)
    NOT             reduce using rule 36 (unaryRelExpr -> relExpr .)
    NUMBER          reduce using rule 36 (unaryRelExpr -> relExpr .)
    $end            reduce using rule 36 (unaryRelExpr -> relExpr .)
    ELSE            reduce using rule 36 (unaryRelExpr -> relExpr .)
    COL             reduce using rule 36 (unaryRelExpr -> relExpr .)
    SEMCOL          reduce using rule 36 (unaryRelExpr -> relExpr .)


state 29

    (37) relExpr -> sumExpr . relop sumExpr
    (38) relExpr -> sumExpr .
    (45) sumExpr -> sumExpr . sumop term
    (39) relop -> . LTE
    (40) relop -> . LT
    (41) relop -> . GTE
    (42) relop -> . GT
    (43) relop -> . EQ
    (44) relop -> . NEQ
    (47) sumop -> . SUM
    (48) sumop -> . SUBST

    AND             reduce using rule 38 (relExpr -> sumExpr .)
    OR              reduce using rule 38 (relExpr -> sumExpr .)
    IF              reduce using rule 38 (relExpr -> sumExpr .)
    WHILE           reduce using rule 38 (relExpr -> sumExpr .)
    RETURN          reduce using rule 38 (relExpr -> sumExpr .)
    INPUT           reduce using rule 38 (relExpr -> sumExpr .)
    PRINT           reduce using rule 38 (relExpr -> sumExpr .)
    LINE_COMMENT    reduce using rule 38 (relExpr -> sumExpr .)
    NAME            reduce using rule 38 (relExpr -> sumExpr .)
    DEF             reduce using rule 38 (relExpr -> sumExpr .)
    CLASS           reduce using rule 38 (relExpr -> sumExpr .)
    NOT             reduce using rule 38 (relExpr -> sumExpr .)
    NUMBER          reduce using rule 38 (relExpr -> sumExpr .)
    $end            reduce using rule 38 (relExpr -> sumExpr .)
    ELSE            reduce using rule 38 (relExpr -> sumExpr .)
    COL             reduce using rule 38 (relExpr -> sumExpr .)
    SEMCOL          reduce using rule 38 (relExpr -> sumExpr .)
    LTE             shift and go to state 51
    LT              shift and go to state 52
    GTE             shift and go to state 53
    GT              shift and go to state 54
    EQ              shift and go to state 55
    NEQ             shift and go to state 56
    SUM             shift and go to state 57
    SUBST           shift and go to state 58

    relop                          shift and go to state 49
    sumop                          shift and go to state 50

state 30

    (46) sumExpr -> term .
    (49) term -> term . mulop opElement
    (53) mulop -> . PROD
    (54) mulop -> . DIV

    LTE             reduce using rule 46 (sumExpr -> term .)
    LT              reduce using rule 46 (sumExpr -> term .)
    GTE             reduce using rule 46 (sumExpr -> term .)
    GT              reduce using rule 46 (sumExpr -> term .)
    EQ              reduce using rule 46 (sumExpr -> term .)
    NEQ             reduce using rule 46 (sumExpr -> term .)
    SUM             reduce using rule 46 (sumExpr -> term .)
    SUBST           reduce using rule 46 (sumExpr -> term .)
    AND             reduce using rule 46 (sumExpr -> term .)
    OR              reduce using rule 46 (sumExpr -> term .)
    IF              reduce using rule 46 (sumExpr -> term .)
    WHILE           reduce using rule 46 (sumExpr -> term .)
    RETURN          reduce using rule 46 (sumExpr -> term .)
    INPUT           reduce using rule 46 (sumExpr -> term .)
    PRINT           reduce using rule 46 (sumExpr -> term .)
    LINE_COMMENT    reduce using rule 46 (sumExpr -> term .)
    NAME            reduce using rule 46 (sumExpr -> term .)
    DEF             reduce using rule 46 (sumExpr -> term .)
    CLASS           reduce using rule 46 (sumExpr -> term .)
    NOT             reduce using rule 46 (sumExpr -> term .)
    NUMBER          reduce using rule 46 (sumExpr -> term .)
    $end            reduce using rule 46 (sumExpr -> term .)
    ELSE            reduce using rule 46 (sumExpr -> term .)
    COL             reduce using rule 46 (sumExpr -> term .)
    SEMCOL          reduce using rule 46 (sumExpr -> term .)
    PROD            shift and go to state 60
    DIV             shift and go to state 61

    mulop                          shift and go to state 59

state 31

    (50) term -> opElement .

    PROD            reduce using rule 50 (term -> opElement .)
    DIV             reduce using rule 50 (term -> opElement .)
    LTE             reduce using rule 50 (term -> opElement .)
    LT              reduce using rule 50 (term -> opElement .)
    GTE             reduce using rule 50 (term -> opElement .)
    GT              reduce using rule 50 (term -> opElement .)
    EQ              reduce using rule 50 (term -> opElement .)
    NEQ             reduce using rule 50 (term -> opElement .)
    SUM             reduce using rule 50 (term -> opElement .)
    SUBST           reduce using rule 50 (term -> opElement .)
    AND             reduce using rule 50 (term -> opElement .)
    OR              reduce using rule 50 (term -> opElement .)
    IF              reduce using rule 50 (term -> opElement .)
    WHILE           reduce using rule 50 (term -> opElement .)
    RETURN          reduce using rule 50 (term -> opElement .)
    INPUT           reduce using rule 50 (term -> opElement .)
    PRINT           reduce using rule 50 (term -> opElement .)
    LINE_COMMENT    reduce using rule 50 (term -> opElement .)
    NAME            reduce using rule 50 (term -> opElement .)
    DEF             reduce using rule 50 (term -> opElement .)
    CLASS           reduce using rule 50 (term -> opElement .)
    NOT             reduce using rule 50 (term -> opElement .)
    NUMBER          reduce using rule 50 (term -> opElement .)
    $end            reduce using rule 50 (term -> opElement .)
    ELSE            reduce using rule 50 (term -> opElement .)
    COL             reduce using rule 50 (term -> opElement .)
    SEMCOL          reduce using rule 50 (term -> opElement .)


state 32

    (2) suite -> stmt suite .

    $end            reduce using rule 2 (suite -> stmt suite .)
    ELSE            reduce using rule 2 (suite -> stmt suite .)
    IF              reduce using rule 2 (suite -> stmt suite .)
    WHILE           reduce using rule 2 (suite -> stmt suite .)
    RETURN          reduce using rule 2 (suite -> stmt suite .)
    INPUT           reduce using rule 2 (suite -> stmt suite .)
    PRINT           reduce using rule 2 (suite -> stmt suite .)
    LINE_COMMENT    reduce using rule 2 (suite -> stmt suite .)
    NAME            reduce using rule 2 (suite -> stmt suite .)
    DEF             reduce using rule 2 (suite -> stmt suite .)
    CLASS           reduce using rule 2 (suite -> stmt suite .)
    NOT             reduce using rule 2 (suite -> stmt suite .)
    NUMBER          reduce using rule 2 (suite -> stmt suite .)


state 33

    (7) stmt -> returnStmt SEMCOL .

    IF              reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    WHILE           reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    RETURN          reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    INPUT           reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    PRINT           reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    NAME            reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    DEF             reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    CLASS           reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    NOT             reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    NUMBER          reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    $end            reduce using rule 7 (stmt -> returnStmt SEMCOL .)
    ELSE            reduce using rule 7 (stmt -> returnStmt SEMCOL .)


state 34

    (8) stmt -> inputStmt SEMCOL .

    IF              reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    WHILE           reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    RETURN          reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    INPUT           reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    PRINT           reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    NAME            reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    DEF             reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    CLASS           reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    NOT             reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    NUMBER          reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    $end            reduce using rule 8 (stmt -> inputStmt SEMCOL .)
    ELSE            reduce using rule 8 (stmt -> inputStmt SEMCOL .)


state 35

    (9) stmt -> outputStmt SEMCOL .

    IF              reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    WHILE           reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    RETURN          reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    INPUT           reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    PRINT           reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    NAME            reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    DEF             reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    CLASS           reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    NOT             reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    NUMBER          reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    $end            reduce using rule 9 (stmt -> outputStmt SEMCOL .)
    ELSE            reduce using rule 9 (stmt -> outputStmt SEMCOL .)


state 36

    (31) simpleExpr -> simpleExpr OR . andExpr
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NOT             shift and go to state 27
    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    andExpr                        shift and go to state 62
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 37

    (11) declar -> varDeclar SEMCOL .

    IF              reduce using rule 11 (declar -> varDeclar SEMCOL .)
    WHILE           reduce using rule 11 (declar -> varDeclar SEMCOL .)
    RETURN          reduce using rule 11 (declar -> varDeclar SEMCOL .)
    INPUT           reduce using rule 11 (declar -> varDeclar SEMCOL .)
    PRINT           reduce using rule 11 (declar -> varDeclar SEMCOL .)
    LINE_COMMENT    reduce using rule 11 (declar -> varDeclar SEMCOL .)
    NAME            reduce using rule 11 (declar -> varDeclar SEMCOL .)
    DEF             reduce using rule 11 (declar -> varDeclar SEMCOL .)
    CLASS           reduce using rule 11 (declar -> varDeclar SEMCOL .)
    NOT             reduce using rule 11 (declar -> varDeclar SEMCOL .)
    NUMBER          reduce using rule 11 (declar -> varDeclar SEMCOL .)
    $end            reduce using rule 11 (declar -> varDeclar SEMCOL .)
    ELSE            reduce using rule 11 (declar -> varDeclar SEMCOL .)


state 38

    (26) selectionStmt -> IF simpleExpr . COL suite
    (27) selectionStmt -> IF simpleExpr . COL suite ELSE COL suite
    (31) simpleExpr -> simpleExpr . OR andExpr

    COL             shift and go to state 63
    OR              shift and go to state 36


state 39

    (51) opElement -> NAME .

    PROD            reduce using rule 51 (opElement -> NAME .)
    DIV             reduce using rule 51 (opElement -> NAME .)
    LTE             reduce using rule 51 (opElement -> NAME .)
    LT              reduce using rule 51 (opElement -> NAME .)
    GTE             reduce using rule 51 (opElement -> NAME .)
    GT              reduce using rule 51 (opElement -> NAME .)
    EQ              reduce using rule 51 (opElement -> NAME .)
    NEQ             reduce using rule 51 (opElement -> NAME .)
    SUM             reduce using rule 51 (opElement -> NAME .)
    SUBST           reduce using rule 51 (opElement -> NAME .)
    AND             reduce using rule 51 (opElement -> NAME .)
    COL             reduce using rule 51 (opElement -> NAME .)
    OR              reduce using rule 51 (opElement -> NAME .)
    SEMCOL          reduce using rule 51 (opElement -> NAME .)
    IF              reduce using rule 51 (opElement -> NAME .)
    WHILE           reduce using rule 51 (opElement -> NAME .)
    RETURN          reduce using rule 51 (opElement -> NAME .)
    INPUT           reduce using rule 51 (opElement -> NAME .)
    PRINT           reduce using rule 51 (opElement -> NAME .)
    LINE_COMMENT    reduce using rule 51 (opElement -> NAME .)
    NAME            reduce using rule 51 (opElement -> NAME .)
    DEF             reduce using rule 51 (opElement -> NAME .)
    CLASS           reduce using rule 51 (opElement -> NAME .)
    NOT             reduce using rule 51 (opElement -> NAME .)
    NUMBER          reduce using rule 51 (opElement -> NAME .)
    $end            reduce using rule 51 (opElement -> NAME .)
    ELSE            reduce using rule 51 (opElement -> NAME .)


state 40

    (28) iterationStmt -> WHILE simpleExpr . COL suite
    (31) simpleExpr -> simpleExpr . OR andExpr

    COL             shift and go to state 64
    OR              shift and go to state 36


state 41

    (30) returnStmt -> RETURN simpleExpr .
    (31) simpleExpr -> simpleExpr . OR andExpr

    SEMCOL          reduce using rule 30 (returnStmt -> RETURN simpleExpr .)
    OR              shift and go to state 36


state 42

    (55) inputStmt -> INPUT LPARENT . RPARENT

    RPARENT         shift and go to state 65


state 43

    (56) outputStmt -> PRINT LPARENT . STRING RPARENT

    STRING          shift and go to state 66


state 44

    (33) andExpr -> andExpr AND . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NOT             shift and go to state 27
    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    unaryRelExpr                   shift and go to state 67
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 45

    (14) varDeclar -> NAME ASSIGN . STRING
    (15) varDeclar -> NAME ASSIGN . NUMBER
    (16) varDeclar -> NAME ASSIGN . NAME
    (17) varDeclar -> NAME ASSIGN . objConstruct
    (24) objConstruct -> . NAME LPARENT params RPARENT

    STRING          shift and go to state 69
    NUMBER          shift and go to state 70
    NAME            shift and go to state 68

    objConstruct                   shift and go to state 71

state 46

    (18) funcDeclar -> DEF NAME . LPARENT RPARENT COL suite
    (19) funcDeclar -> DEF NAME . LPARENT params RPARENT COL suite

    LPARENT         shift and go to state 72


state 47

    (23) objDeclar -> CLASS NAME . COL suite

    COL             shift and go to state 73


state 48

    (35) unaryRelExpr -> NOT unaryRelExpr .

    AND             reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    OR              reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    IF              reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    WHILE           reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    RETURN          reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    INPUT           reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    PRINT           reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    LINE_COMMENT    reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    NAME            reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    DEF             reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    CLASS           reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    NOT             reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    NUMBER          reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    $end            reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    ELSE            reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    COL             reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)
    SEMCOL          reduce using rule 35 (unaryRelExpr -> NOT unaryRelExpr .)


state 49

    (37) relExpr -> sumExpr relop . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    sumExpr                        shift and go to state 74
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 50

    (45) sumExpr -> sumExpr sumop . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    term                           shift and go to state 75
    opElement                      shift and go to state 31

state 51

    (39) relop -> LTE .

    NAME            reduce using rule 39 (relop -> LTE .)
    NUMBER          reduce using rule 39 (relop -> LTE .)


state 52

    (40) relop -> LT .

    NAME            reduce using rule 40 (relop -> LT .)
    NUMBER          reduce using rule 40 (relop -> LT .)


state 53

    (41) relop -> GTE .

    NAME            reduce using rule 41 (relop -> GTE .)
    NUMBER          reduce using rule 41 (relop -> GTE .)


state 54

    (42) relop -> GT .

    NAME            reduce using rule 42 (relop -> GT .)
    NUMBER          reduce using rule 42 (relop -> GT .)


state 55

    (43) relop -> EQ .

    NAME            reduce using rule 43 (relop -> EQ .)
    NUMBER          reduce using rule 43 (relop -> EQ .)


state 56

    (44) relop -> NEQ .

    NAME            reduce using rule 44 (relop -> NEQ .)
    NUMBER          reduce using rule 44 (relop -> NEQ .)


state 57

    (47) sumop -> SUM .

    NAME            reduce using rule 47 (sumop -> SUM .)
    NUMBER          reduce using rule 47 (sumop -> SUM .)


state 58

    (48) sumop -> SUBST .

    NAME            reduce using rule 48 (sumop -> SUBST .)
    NUMBER          reduce using rule 48 (sumop -> SUBST .)


state 59

    (49) term -> term mulop . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    NAME            shift and go to state 39
    NUMBER          shift and go to state 23

    opElement                      shift and go to state 76

state 60

    (53) mulop -> PROD .

    NAME            reduce using rule 53 (mulop -> PROD .)
    NUMBER          reduce using rule 53 (mulop -> PROD .)


state 61

    (54) mulop -> DIV .

    NAME            reduce using rule 54 (mulop -> DIV .)
    NUMBER          reduce using rule 54 (mulop -> DIV .)


state 62

    (31) simpleExpr -> simpleExpr OR andExpr .
    (33) andExpr -> andExpr . AND unaryRelExpr

    OR              reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    IF              reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    WHILE           reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    RETURN          reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    INPUT           reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    PRINT           reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    LINE_COMMENT    reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    NAME            reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    DEF             reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    CLASS           reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    NOT             reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    NUMBER          reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    $end            reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    ELSE            reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    COL             reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    SEMCOL          reduce using rule 31 (simpleExpr -> simpleExpr OR andExpr .)
    AND             shift and go to state 44


state 63

    (26) selectionStmt -> IF simpleExpr COL . suite
    (27) selectionStmt -> IF simpleExpr COL . suite ELSE COL suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    simpleExpr                     shift and go to state 11
    suite                          shift and go to state 77
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 64

    (28) iterationStmt -> WHILE simpleExpr COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    simpleExpr                     shift and go to state 11
    suite                          shift and go to state 78
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 65

    (55) inputStmt -> INPUT LPARENT RPARENT .

    SEMCOL          reduce using rule 55 (inputStmt -> INPUT LPARENT RPARENT .)


state 66

    (56) outputStmt -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 79


state 67

    (33) andExpr -> andExpr AND unaryRelExpr .

    AND             reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    OR              reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    IF              reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    WHILE           reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    RETURN          reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    INPUT           reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    PRINT           reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    LINE_COMMENT    reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    NAME            reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    DEF             reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    CLASS           reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    NOT             reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    NUMBER          reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    $end            reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    ELSE            reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    COL             reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)
    SEMCOL          reduce using rule 33 (andExpr -> andExpr AND unaryRelExpr .)


state 68

    (16) varDeclar -> NAME ASSIGN NAME .
    (24) objConstruct -> NAME . LPARENT params RPARENT

    SEMCOL          reduce using rule 16 (varDeclar -> NAME ASSIGN NAME .)
    LPARENT         shift and go to state 80


state 69

    (14) varDeclar -> NAME ASSIGN STRING .

    SEMCOL          reduce using rule 14 (varDeclar -> NAME ASSIGN STRING .)


state 70

    (15) varDeclar -> NAME ASSIGN NUMBER .

    SEMCOL          reduce using rule 15 (varDeclar -> NAME ASSIGN NUMBER .)


state 71

    (17) varDeclar -> NAME ASSIGN objConstruct .

    SEMCOL          reduce using rule 17 (varDeclar -> NAME ASSIGN objConstruct .)


state 72

    (18) funcDeclar -> DEF NAME LPARENT . RPARENT COL suite
    (19) funcDeclar -> DEF NAME LPARENT . params RPARENT COL suite
    (20) params -> . paramsList
    (21) paramsList -> . NAME COMA paramsList
    (22) paramsList -> . NAME

    RPARENT         shift and go to state 82
    NAME            shift and go to state 81

    params                         shift and go to state 83
    paramsList                     shift and go to state 84

state 73

    (23) objDeclar -> CLASS NAME COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    suite                          shift and go to state 85
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    simpleExpr                     shift and go to state 11
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 74

    (37) relExpr -> sumExpr relop sumExpr .
    (45) sumExpr -> sumExpr . sumop term
    (47) sumop -> . SUM
    (48) sumop -> . SUBST

    AND             reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    OR              reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    IF              reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    WHILE           reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    RETURN          reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    INPUT           reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    PRINT           reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    LINE_COMMENT    reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    NAME            reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    DEF             reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    CLASS           reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    NOT             reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    NUMBER          reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    $end            reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    ELSE            reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    COL             reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    SEMCOL          reduce using rule 37 (relExpr -> sumExpr relop sumExpr .)
    SUM             shift and go to state 57
    SUBST           shift and go to state 58

    sumop                          shift and go to state 50

state 75

    (45) sumExpr -> sumExpr sumop term .
    (49) term -> term . mulop opElement
    (53) mulop -> . PROD
    (54) mulop -> . DIV

    LTE             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    LT              reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    GTE             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    GT              reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    EQ              reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    NEQ             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    SUM             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    SUBST           reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    AND             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    OR              reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    IF              reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    WHILE           reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    RETURN          reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    INPUT           reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    PRINT           reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    LINE_COMMENT    reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    NAME            reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    DEF             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    CLASS           reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    NOT             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    NUMBER          reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    $end            reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    ELSE            reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    COL             reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    SEMCOL          reduce using rule 45 (sumExpr -> sumExpr sumop term .)
    PROD            shift and go to state 60
    DIV             shift and go to state 61

    mulop                          shift and go to state 59

state 76

    (49) term -> term mulop opElement .

    PROD            reduce using rule 49 (term -> term mulop opElement .)
    DIV             reduce using rule 49 (term -> term mulop opElement .)
    LTE             reduce using rule 49 (term -> term mulop opElement .)
    LT              reduce using rule 49 (term -> term mulop opElement .)
    GTE             reduce using rule 49 (term -> term mulop opElement .)
    GT              reduce using rule 49 (term -> term mulop opElement .)
    EQ              reduce using rule 49 (term -> term mulop opElement .)
    NEQ             reduce using rule 49 (term -> term mulop opElement .)
    SUM             reduce using rule 49 (term -> term mulop opElement .)
    SUBST           reduce using rule 49 (term -> term mulop opElement .)
    AND             reduce using rule 49 (term -> term mulop opElement .)
    OR              reduce using rule 49 (term -> term mulop opElement .)
    IF              reduce using rule 49 (term -> term mulop opElement .)
    WHILE           reduce using rule 49 (term -> term mulop opElement .)
    RETURN          reduce using rule 49 (term -> term mulop opElement .)
    INPUT           reduce using rule 49 (term -> term mulop opElement .)
    PRINT           reduce using rule 49 (term -> term mulop opElement .)
    LINE_COMMENT    reduce using rule 49 (term -> term mulop opElement .)
    NAME            reduce using rule 49 (term -> term mulop opElement .)
    DEF             reduce using rule 49 (term -> term mulop opElement .)
    CLASS           reduce using rule 49 (term -> term mulop opElement .)
    NOT             reduce using rule 49 (term -> term mulop opElement .)
    NUMBER          reduce using rule 49 (term -> term mulop opElement .)
    $end            reduce using rule 49 (term -> term mulop opElement .)
    ELSE            reduce using rule 49 (term -> term mulop opElement .)
    COL             reduce using rule 49 (term -> term mulop opElement .)
    SEMCOL          reduce using rule 49 (term -> term mulop opElement .)


state 77

    (26) selectionStmt -> IF simpleExpr COL suite .
    (27) selectionStmt -> IF simpleExpr COL suite . ELSE COL suite

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    WHILE           reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    RETURN          reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    INPUT           reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    PRINT           reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    LINE_COMMENT    reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    NAME            reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    DEF             reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    CLASS           reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    NOT             reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    NUMBER          reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    $end            reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .)
    ELSE            shift and go to state 86

  ! ELSE            [ reduce using rule 26 (selectionStmt -> IF simpleExpr COL suite .) ]


state 78

    (28) iterationStmt -> WHILE simpleExpr COL suite .

    IF              reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    WHILE           reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    RETURN          reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    INPUT           reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    PRINT           reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    LINE_COMMENT    reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    NAME            reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    DEF             reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    CLASS           reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    NOT             reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    NUMBER          reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    $end            reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)
    ELSE            reduce using rule 28 (iterationStmt -> WHILE simpleExpr COL suite .)


state 79

    (56) outputStmt -> PRINT LPARENT STRING RPARENT .

    SEMCOL          reduce using rule 56 (outputStmt -> PRINT LPARENT STRING RPARENT .)


state 80

    (24) objConstruct -> NAME LPARENT . params RPARENT
    (20) params -> . paramsList
    (21) paramsList -> . NAME COMA paramsList
    (22) paramsList -> . NAME

    NAME            shift and go to state 81

    params                         shift and go to state 87
    paramsList                     shift and go to state 84

state 81

    (21) paramsList -> NAME . COMA paramsList
    (22) paramsList -> NAME .

    COMA            shift and go to state 88
    RPARENT         reduce using rule 22 (paramsList -> NAME .)


state 82

    (18) funcDeclar -> DEF NAME LPARENT RPARENT . COL suite

    COL             shift and go to state 89


state 83

    (19) funcDeclar -> DEF NAME LPARENT params . RPARENT COL suite

    RPARENT         shift and go to state 90


state 84

    (20) params -> paramsList .

    RPARENT         reduce using rule 20 (params -> paramsList .)


state 85

    (23) objDeclar -> CLASS NAME COL suite .

    IF              reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    WHILE           reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    RETURN          reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    INPUT           reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    PRINT           reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    LINE_COMMENT    reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    NAME            reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    DEF             reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    CLASS           reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    NOT             reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    NUMBER          reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    $end            reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)
    ELSE            reduce using rule 23 (objDeclar -> CLASS NAME COL suite .)


state 86

    (27) selectionStmt -> IF simpleExpr COL suite ELSE . COL suite

    COL             shift and go to state 91


state 87

    (24) objConstruct -> NAME LPARENT params . RPARENT

    RPARENT         shift and go to state 92


state 88

    (21) paramsList -> NAME COMA . paramsList
    (21) paramsList -> . NAME COMA paramsList
    (22) paramsList -> . NAME

    NAME            shift and go to state 81

    paramsList                     shift and go to state 93

state 89

    (18) funcDeclar -> DEF NAME LPARENT RPARENT COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    suite                          shift and go to state 94
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    simpleExpr                     shift and go to state 11
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 90

    (19) funcDeclar -> DEF NAME LPARENT params RPARENT . COL suite

    COL             shift and go to state 95


state 91

    (27) selectionStmt -> IF simpleExpr COL suite ELSE COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    simpleExpr                     shift and go to state 11
    suite                          shift and go to state 96
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 92

    (24) objConstruct -> NAME LPARENT params RPARENT .

    SEMCOL          reduce using rule 24 (objConstruct -> NAME LPARENT params RPARENT .)


state 93

    (21) paramsList -> NAME COMA paramsList .

    RPARENT         reduce using rule 21 (paramsList -> NAME COMA paramsList .)


state 94

    (18) funcDeclar -> DEF NAME LPARENT RPARENT COL suite .

    IF              reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    WHILE           reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    RETURN          reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    INPUT           reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    PRINT           reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    LINE_COMMENT    reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NAME            reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    DEF             reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    CLASS           reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NOT             reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NUMBER          reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    $end            reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    ELSE            reduce using rule 18 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)


state 95

    (19) funcDeclar -> DEF NAME LPARENT params RPARENT COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . selectionStmt
    (6) stmt -> . iterationStmt
    (7) stmt -> . returnStmt SEMCOL
    (8) stmt -> . inputStmt SEMCOL
    (9) stmt -> . outputStmt SEMCOL
    (10) stmt -> . commentLine
    (25) exprStmt -> . simpleExpr
    (11) declar -> . varDeclar SEMCOL
    (12) declar -> . funcDeclar
    (13) declar -> . objDeclar
    (26) selectionStmt -> . IF simpleExpr COL suite
    (27) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (28) iterationStmt -> . WHILE simpleExpr COL suite
    (29) returnStmt -> . RETURN
    (30) returnStmt -> . RETURN simpleExpr
    (55) inputStmt -> . INPUT LPARENT RPARENT
    (56) outputStmt -> . PRINT LPARENT STRING RPARENT
    (57) commentLine -> . LINE_COMMENT
    (31) simpleExpr -> . simpleExpr OR andExpr
    (32) simpleExpr -> . andExpr
    (14) varDeclar -> . NAME ASSIGN STRING
    (15) varDeclar -> . NAME ASSIGN NUMBER
    (16) varDeclar -> . NAME ASSIGN NAME
    (17) varDeclar -> . NAME ASSIGN objConstruct
    (18) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (19) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (23) objDeclar -> . CLASS NAME COL suite
    (33) andExpr -> . andExpr AND unaryRelExpr
    (34) andExpr -> . unaryRelExpr
    (35) unaryRelExpr -> . NOT unaryRelExpr
    (36) unaryRelExpr -> . relExpr
    (37) relExpr -> . sumExpr relop sumExpr
    (38) relExpr -> . sumExpr
    (45) sumExpr -> . sumExpr sumop term
    (46) sumExpr -> . term
    (49) term -> . term mulop opElement
    (50) term -> . opElement
    (51) opElement -> . NAME
    (52) opElement -> . NUMBER

    IF              shift and go to state 15
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    INPUT           shift and go to state 18
    PRINT           shift and go to state 19
    LINE_COMMENT    shift and go to state 20
    NAME            shift and go to state 22
    DEF             shift and go to state 24
    CLASS           shift and go to state 25
    NOT             shift and go to state 27
    NUMBER          shift and go to state 23

    suite                          shift and go to state 97
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    selectionStmt                  shift and go to state 5
    iterationStmt                  shift and go to state 6
    returnStmt                     shift and go to state 7
    inputStmt                      shift and go to state 8
    outputStmt                     shift and go to state 9
    commentLine                    shift and go to state 10
    simpleExpr                     shift and go to state 11
    varDeclar                      shift and go to state 12
    funcDeclar                     shift and go to state 13
    objDeclar                      shift and go to state 14
    andExpr                        shift and go to state 21
    unaryRelExpr                   shift and go to state 26
    relExpr                        shift and go to state 28
    sumExpr                        shift and go to state 29
    term                           shift and go to state 30
    opElement                      shift and go to state 31

state 96

    (27) selectionStmt -> IF simpleExpr COL suite ELSE COL suite .

    IF              reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    WHILE           reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    RETURN          reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    INPUT           reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    PRINT           reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    LINE_COMMENT    reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NAME            reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    DEF             reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    CLASS           reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NOT             reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NUMBER          reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    $end            reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    ELSE            reduce using rule 27 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)


state 97

    (19) funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .

    IF              reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    WHILE           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    RETURN          reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    INPUT           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    PRINT           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    LINE_COMMENT    reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NAME            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    DEF             reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    CLASS           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NOT             reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NUMBER          reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    $end            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    ELSE            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for LINE_COMMENT in state 2 resolved as shift
WARNING: shift/reduce conflict for NAME in state 2 resolved as shift
WARNING: shift/reduce conflict for DEF in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for NOT in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 2 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 77 resolved as shift
