Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME = expression
Rule 2     statement -> expression
Rule 3     expression -> expression + expression
Rule 4     expression -> expression - expression
Rule 5     expression -> expression * expression
Rule 6     expression -> expression / expression
Rule 7     expression -> - expression
Rule 8     expression -> ( expression )
Rule 9     expression -> NUMBER
Rule 10    expression -> STRING
Rule 11    expression -> LINE_COMMENT
Rule 12    expression -> INPUT
Rule 13    expression -> PRINT
Rule 14    expression -> IF
Rule 15    expression -> ELSE
Rule 16    expression -> NAME

Terminals, with rules where they appear

(                    : 8
)                    : 8
*                    : 5
+                    : 3
-                    : 4 7
/                    : 6
=                    : 1
ELSE                 : 15
IF                   : 14
INPUT                : 12
LINE_COMMENT         : 11
NAME                 : 1 16
NUMBER               : 9
PRINT                : 13
STRING               : 10
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME = expression
    (2) statement -> . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    NAME            shift and go to state 2
    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NAME . = expression
    (16) expression -> NAME .

    =               shift and go to state 13
    +               reduce using rule 16 (expression -> NAME .)
    -               reduce using rule 16 (expression -> NAME .)
    *               reduce using rule 16 (expression -> NAME .)
    /               reduce using rule 16 (expression -> NAME .)
    $end            reduce using rule 16 (expression -> NAME .)


state 3

    (2) statement -> expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    $end            reduce using rule 2 (statement -> expression .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17


state 4

    (7) expression -> - . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 18

state 5

    (8) expression -> ( . expression )
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 20

state 6

    (9) expression -> NUMBER .

    +               reduce using rule 9 (expression -> NUMBER .)
    -               reduce using rule 9 (expression -> NUMBER .)
    *               reduce using rule 9 (expression -> NUMBER .)
    /               reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)


state 7

    (10) expression -> STRING .

    +               reduce using rule 10 (expression -> STRING .)
    -               reduce using rule 10 (expression -> STRING .)
    *               reduce using rule 10 (expression -> STRING .)
    /               reduce using rule 10 (expression -> STRING .)
    $end            reduce using rule 10 (expression -> STRING .)
    )               reduce using rule 10 (expression -> STRING .)


state 8

    (11) expression -> LINE_COMMENT .

    +               reduce using rule 11 (expression -> LINE_COMMENT .)
    -               reduce using rule 11 (expression -> LINE_COMMENT .)
    *               reduce using rule 11 (expression -> LINE_COMMENT .)
    /               reduce using rule 11 (expression -> LINE_COMMENT .)
    $end            reduce using rule 11 (expression -> LINE_COMMENT .)
    )               reduce using rule 11 (expression -> LINE_COMMENT .)


state 9

    (12) expression -> INPUT .

    +               reduce using rule 12 (expression -> INPUT .)
    -               reduce using rule 12 (expression -> INPUT .)
    *               reduce using rule 12 (expression -> INPUT .)
    /               reduce using rule 12 (expression -> INPUT .)
    $end            reduce using rule 12 (expression -> INPUT .)
    )               reduce using rule 12 (expression -> INPUT .)


state 10

    (13) expression -> PRINT .

    +               reduce using rule 13 (expression -> PRINT .)
    -               reduce using rule 13 (expression -> PRINT .)
    *               reduce using rule 13 (expression -> PRINT .)
    /               reduce using rule 13 (expression -> PRINT .)
    $end            reduce using rule 13 (expression -> PRINT .)
    )               reduce using rule 13 (expression -> PRINT .)


state 11

    (14) expression -> IF .

    +               reduce using rule 14 (expression -> IF .)
    -               reduce using rule 14 (expression -> IF .)
    *               reduce using rule 14 (expression -> IF .)
    /               reduce using rule 14 (expression -> IF .)
    $end            reduce using rule 14 (expression -> IF .)
    )               reduce using rule 14 (expression -> IF .)


state 12

    (15) expression -> ELSE .

    +               reduce using rule 15 (expression -> ELSE .)
    -               reduce using rule 15 (expression -> ELSE .)
    *               reduce using rule 15 (expression -> ELSE .)
    /               reduce using rule 15 (expression -> ELSE .)
    $end            reduce using rule 15 (expression -> ELSE .)
    )               reduce using rule 15 (expression -> ELSE .)


state 13

    (1) statement -> NAME = . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 21

state 14

    (3) expression -> expression + . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 22

state 15

    (4) expression -> expression - . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 23

state 16

    (5) expression -> expression * . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 24

state 17

    (6) expression -> expression / . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . INPUT
    (13) expression -> . PRINT
    (14) expression -> . IF
    (15) expression -> . ELSE
    (16) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    INPUT           shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    ELSE            shift and go to state 12
    NAME            shift and go to state 19

    expression                     shift and go to state 25

state 18

    (7) expression -> - expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 7 (expression -> - expression .)
    -               reduce using rule 7 (expression -> - expression .)
    *               reduce using rule 7 (expression -> - expression .)
    /               reduce using rule 7 (expression -> - expression .)
    $end            reduce using rule 7 (expression -> - expression .)
    )               reduce using rule 7 (expression -> - expression .)

  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]


state 19

    (16) expression -> NAME .

    +               reduce using rule 16 (expression -> NAME .)
    -               reduce using rule 16 (expression -> NAME .)
    *               reduce using rule 16 (expression -> NAME .)
    /               reduce using rule 16 (expression -> NAME .)
    $end            reduce using rule 16 (expression -> NAME .)
    )               reduce using rule 16 (expression -> NAME .)


state 20

    (8) expression -> ( expression . )
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    )               shift and go to state 26
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17


state 21

    (1) statement -> NAME = expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> NAME = expression .)
    +               shift and go to state 14
    -               shift and go to state 15
    *               shift and go to state 16
    /               shift and go to state 17


state 22

    (3) expression -> expression + expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 3 (expression -> expression + expression .)
    -               reduce using rule 3 (expression -> expression + expression .)
    $end            reduce using rule 3 (expression -> expression + expression .)
    )               reduce using rule 3 (expression -> expression + expression .)
    *               shift and go to state 16
    /               shift and go to state 17

  ! *               [ reduce using rule 3 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]


state 23

    (4) expression -> expression - expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 4 (expression -> expression - expression .)
    -               reduce using rule 4 (expression -> expression - expression .)
    $end            reduce using rule 4 (expression -> expression - expression .)
    )               reduce using rule 4 (expression -> expression - expression .)
    *               shift and go to state 16
    /               shift and go to state 17

  ! *               [ reduce using rule 4 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]


state 24

    (5) expression -> expression * expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 5 (expression -> expression * expression .)
    -               reduce using rule 5 (expression -> expression * expression .)
    *               reduce using rule 5 (expression -> expression * expression .)
    /               reduce using rule 5 (expression -> expression * expression .)
    $end            reduce using rule 5 (expression -> expression * expression .)
    )               reduce using rule 5 (expression -> expression * expression .)

  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]


state 25

    (6) expression -> expression / expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 6 (expression -> expression / expression .)
    -               reduce using rule 6 (expression -> expression / expression .)
    *               reduce using rule 6 (expression -> expression / expression .)
    /               reduce using rule 6 (expression -> expression / expression .)
    $end            reduce using rule 6 (expression -> expression / expression .)
    )               reduce using rule 6 (expression -> expression / expression .)

  ! +               [ shift and go to state 14 ]
  ! -               [ shift and go to state 15 ]
  ! *               [ shift and go to state 16 ]
  ! /               [ shift and go to state 17 ]


state 26

    (8) expression -> ( expression ) .

    +               reduce using rule 8 (expression -> ( expression ) .)
    -               reduce using rule 8 (expression -> ( expression ) .)
    *               reduce using rule 8 (expression -> ( expression ) .)
    /               reduce using rule 8 (expression -> ( expression ) .)
    $end            reduce using rule 8 (expression -> ( expression ) .)
    )               reduce using rule 8 (expression -> ( expression ) .)

