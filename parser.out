Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> suite
Rule 1     suite -> stmt
Rule 2     suite -> stmt suite
Rule 3     stmt -> exprStmt
Rule 4     stmt -> declar
Rule 5     stmt -> call SEMCOL
Rule 6     stmt -> selectionStmt
Rule 7     stmt -> iterationStmt
Rule 8     stmt -> returnStmt SEMCOL
Rule 9     stmt -> inputStmt SEMCOL
Rule 10    stmt -> outputStmt SEMCOL
Rule 11    stmt -> commentLine
Rule 12    declar -> varDeclar SEMCOL
Rule 13    declar -> funcDeclar
Rule 14    declar -> objDeclar
Rule 15    varDeclar -> NAME ASSIGN STRING
Rule 16    varDeclar -> NAME ASSIGN NUMBER
Rule 17    varDeclar -> NAME ASSIGN NAME
Rule 18    varDeclar -> NAME ASSIGN objConstruct
Rule 19    funcDeclar -> DEF NAME LPARENT RPARENT COL suite
Rule 20    funcDeclar -> DEF NAME LPARENT params RPARENT COL suite
Rule 21    params -> paramsList
Rule 22    paramsList -> NAME COMA paramsList
Rule 23    paramsList -> NAME
Rule 24    objDeclar -> CLASS NAME COL suite
Rule 25    objConstruct -> NAME LPARENT RPARENT
Rule 26    objConstruct -> NAME LPARENT params RPARENT
Rule 27    call -> NAME
Rule 28    call -> NAME POINT call
Rule 29    call -> NAME LPARENT RPARENT
Rule 30    call -> NAME LPARENT params RPARENT
Rule 31    call -> call POINT call
Rule 32    exprStmt -> simpleExpr
Rule 33    selectionStmt -> IF simpleExpr COL suite
Rule 34    selectionStmt -> IF simpleExpr COL suite ELSE COL suite
Rule 35    iterationStmt -> WHILE simpleExpr COL suite
Rule 36    returnStmt -> RETURN
Rule 37    returnStmt -> RETURN simpleExpr
Rule 38    simpleExpr -> simpleExpr OR andExpr
Rule 39    simpleExpr -> andExpr
Rule 40    andExpr -> andExpr AND unaryRelExpr
Rule 41    andExpr -> unaryRelExpr
Rule 42    unaryRelExpr -> NOT unaryRelExpr
Rule 43    unaryRelExpr -> relExpr
Rule 44    relExpr -> sumExpr relop sumExpr
Rule 45    relExpr -> sumExpr
Rule 46    relop -> LTE
Rule 47    relop -> LT
Rule 48    relop -> GTE
Rule 49    relop -> GT
Rule 50    relop -> EQ
Rule 51    relop -> NEQ
Rule 52    sumExpr -> sumExpr sumop term
Rule 53    sumExpr -> term
Rule 54    sumop -> SUM
Rule 55    sumop -> SUBST
Rule 56    term -> term mulop opElement
Rule 57    term -> opElement
Rule 58    opElement -> call
Rule 59    opElement -> NUMBER
Rule 60    mulop -> PROD
Rule 61    mulop -> DIV
Rule 62    inputStmt -> INPUT LPARENT RPARENT
Rule 63    outputStmt -> PRINT LPARENT STRING RPARENT
Rule 64    commentLine -> LINE_COMMENT

Terminals, with rules where they appear

AND                  : 40
ASSIGN               : 15 16 17 18
CLASS                : 24
COL                  : 19 20 24 33 34 34 35
COMA                 : 22
DEF                  : 19 20
DIV                  : 61
ELSE                 : 34
EQ                   : 50
GT                   : 49
GTE                  : 48
IF                   : 33 34
INPUT                : 62
LINE_COMMENT         : 64
LPARENT              : 19 20 25 26 29 30 62 63
LT                   : 47
LTE                  : 46
NAME                 : 15 16 17 17 18 19 20 22 23 24 25 26 27 28 29 30
NEQ                  : 51
NOT                  : 42
NUMBER               : 16 59
OR                   : 38
POINT                : 28 31
PRINT                : 63
PROD                 : 60
RETURN               : 36 37
RPARENT              : 19 20 25 26 29 30 62 63
SEMCOL               : 5 8 9 10 12
STRING               : 15 63
SUBST                : 55
SUM                  : 54
WHILE                : 35
error                : 

Nonterminals, with rules where they appear

andExpr              : 38 39 40
call                 : 5 28 31 31 58
commentLine          : 11
declar               : 4
exprStmt             : 3
funcDeclar           : 13
inputStmt            : 9
iterationStmt        : 7
mulop                : 56
objConstruct         : 18
objDeclar            : 14
opElement            : 56 57
outputStmt           : 10
params               : 20 26 30
paramsList           : 21 22
relExpr              : 43
relop                : 44
returnStmt           : 8
selectionStmt        : 6
simpleExpr           : 32 33 34 35 37 38
stmt                 : 1 2
suite                : 2 19 20 24 33 34 34 35 0
sumExpr              : 44 44 45 52
sumop                : 52
term                 : 52 53 56
unaryRelExpr         : 40 41 42
varDeclar            : 12

Parsing method: LALR

state 0

    (0) S' -> . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    suite                          shift and go to state 1
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    simpleExpr                     shift and go to state 12
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 1

    (0) S' -> suite .



state 2

    (1) suite -> stmt .
    (2) suite -> stmt . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LINE_COMMENT resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 1 (suite -> stmt .)
    ELSE            reduce using rule 1 (suite -> stmt .)
    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

  ! NAME            [ reduce using rule 1 (suite -> stmt .) ]
  ! IF              [ reduce using rule 1 (suite -> stmt .) ]
  ! WHILE           [ reduce using rule 1 (suite -> stmt .) ]
  ! RETURN          [ reduce using rule 1 (suite -> stmt .) ]
  ! INPUT           [ reduce using rule 1 (suite -> stmt .) ]
  ! PRINT           [ reduce using rule 1 (suite -> stmt .) ]
  ! LINE_COMMENT    [ reduce using rule 1 (suite -> stmt .) ]
  ! DEF             [ reduce using rule 1 (suite -> stmt .) ]
  ! CLASS           [ reduce using rule 1 (suite -> stmt .) ]
  ! NOT             [ reduce using rule 1 (suite -> stmt .) ]
  ! NUMBER          [ reduce using rule 1 (suite -> stmt .) ]

    stmt                           shift and go to state 2
    suite                          shift and go to state 33
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    simpleExpr                     shift and go to state 12
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 3

    (3) stmt -> exprStmt .

    NAME            reduce using rule 3 (stmt -> exprStmt .)
    IF              reduce using rule 3 (stmt -> exprStmt .)
    WHILE           reduce using rule 3 (stmt -> exprStmt .)
    RETURN          reduce using rule 3 (stmt -> exprStmt .)
    INPUT           reduce using rule 3 (stmt -> exprStmt .)
    PRINT           reduce using rule 3 (stmt -> exprStmt .)
    LINE_COMMENT    reduce using rule 3 (stmt -> exprStmt .)
    DEF             reduce using rule 3 (stmt -> exprStmt .)
    CLASS           reduce using rule 3 (stmt -> exprStmt .)
    NOT             reduce using rule 3 (stmt -> exprStmt .)
    NUMBER          reduce using rule 3 (stmt -> exprStmt .)
    $end            reduce using rule 3 (stmt -> exprStmt .)
    ELSE            reduce using rule 3 (stmt -> exprStmt .)


state 4

    (4) stmt -> declar .

    NAME            reduce using rule 4 (stmt -> declar .)
    IF              reduce using rule 4 (stmt -> declar .)
    WHILE           reduce using rule 4 (stmt -> declar .)
    RETURN          reduce using rule 4 (stmt -> declar .)
    INPUT           reduce using rule 4 (stmt -> declar .)
    PRINT           reduce using rule 4 (stmt -> declar .)
    LINE_COMMENT    reduce using rule 4 (stmt -> declar .)
    DEF             reduce using rule 4 (stmt -> declar .)
    CLASS           reduce using rule 4 (stmt -> declar .)
    NOT             reduce using rule 4 (stmt -> declar .)
    NUMBER          reduce using rule 4 (stmt -> declar .)
    $end            reduce using rule 4 (stmt -> declar .)
    ELSE            reduce using rule 4 (stmt -> declar .)


state 5

    (5) stmt -> call . SEMCOL
    (31) call -> call . POINT call
    (58) opElement -> call .

    SEMCOL          shift and go to state 34
    POINT           shift and go to state 35
    PROD            reduce using rule 58 (opElement -> call .)
    DIV             reduce using rule 58 (opElement -> call .)
    LTE             reduce using rule 58 (opElement -> call .)
    LT              reduce using rule 58 (opElement -> call .)
    GTE             reduce using rule 58 (opElement -> call .)
    GT              reduce using rule 58 (opElement -> call .)
    EQ              reduce using rule 58 (opElement -> call .)
    NEQ             reduce using rule 58 (opElement -> call .)
    SUM             reduce using rule 58 (opElement -> call .)
    SUBST           reduce using rule 58 (opElement -> call .)
    AND             reduce using rule 58 (opElement -> call .)
    OR              reduce using rule 58 (opElement -> call .)
    NAME            reduce using rule 58 (opElement -> call .)
    IF              reduce using rule 58 (opElement -> call .)
    WHILE           reduce using rule 58 (opElement -> call .)
    RETURN          reduce using rule 58 (opElement -> call .)
    INPUT           reduce using rule 58 (opElement -> call .)
    PRINT           reduce using rule 58 (opElement -> call .)
    LINE_COMMENT    reduce using rule 58 (opElement -> call .)
    DEF             reduce using rule 58 (opElement -> call .)
    CLASS           reduce using rule 58 (opElement -> call .)
    NOT             reduce using rule 58 (opElement -> call .)
    NUMBER          reduce using rule 58 (opElement -> call .)
    $end            reduce using rule 58 (opElement -> call .)
    ELSE            reduce using rule 58 (opElement -> call .)


state 6

    (6) stmt -> selectionStmt .

    NAME            reduce using rule 6 (stmt -> selectionStmt .)
    IF              reduce using rule 6 (stmt -> selectionStmt .)
    WHILE           reduce using rule 6 (stmt -> selectionStmt .)
    RETURN          reduce using rule 6 (stmt -> selectionStmt .)
    INPUT           reduce using rule 6 (stmt -> selectionStmt .)
    PRINT           reduce using rule 6 (stmt -> selectionStmt .)
    LINE_COMMENT    reduce using rule 6 (stmt -> selectionStmt .)
    DEF             reduce using rule 6 (stmt -> selectionStmt .)
    CLASS           reduce using rule 6 (stmt -> selectionStmt .)
    NOT             reduce using rule 6 (stmt -> selectionStmt .)
    NUMBER          reduce using rule 6 (stmt -> selectionStmt .)
    $end            reduce using rule 6 (stmt -> selectionStmt .)
    ELSE            reduce using rule 6 (stmt -> selectionStmt .)


state 7

    (7) stmt -> iterationStmt .

    NAME            reduce using rule 7 (stmt -> iterationStmt .)
    IF              reduce using rule 7 (stmt -> iterationStmt .)
    WHILE           reduce using rule 7 (stmt -> iterationStmt .)
    RETURN          reduce using rule 7 (stmt -> iterationStmt .)
    INPUT           reduce using rule 7 (stmt -> iterationStmt .)
    PRINT           reduce using rule 7 (stmt -> iterationStmt .)
    LINE_COMMENT    reduce using rule 7 (stmt -> iterationStmt .)
    DEF             reduce using rule 7 (stmt -> iterationStmt .)
    CLASS           reduce using rule 7 (stmt -> iterationStmt .)
    NOT             reduce using rule 7 (stmt -> iterationStmt .)
    NUMBER          reduce using rule 7 (stmt -> iterationStmt .)
    $end            reduce using rule 7 (stmt -> iterationStmt .)
    ELSE            reduce using rule 7 (stmt -> iterationStmt .)


state 8

    (8) stmt -> returnStmt . SEMCOL

    SEMCOL          shift and go to state 36


state 9

    (9) stmt -> inputStmt . SEMCOL

    SEMCOL          shift and go to state 37


state 10

    (10) stmt -> outputStmt . SEMCOL

    SEMCOL          shift and go to state 38


state 11

    (11) stmt -> commentLine .

    NAME            reduce using rule 11 (stmt -> commentLine .)
    IF              reduce using rule 11 (stmt -> commentLine .)
    WHILE           reduce using rule 11 (stmt -> commentLine .)
    RETURN          reduce using rule 11 (stmt -> commentLine .)
    INPUT           reduce using rule 11 (stmt -> commentLine .)
    PRINT           reduce using rule 11 (stmt -> commentLine .)
    LINE_COMMENT    reduce using rule 11 (stmt -> commentLine .)
    DEF             reduce using rule 11 (stmt -> commentLine .)
    CLASS           reduce using rule 11 (stmt -> commentLine .)
    NOT             reduce using rule 11 (stmt -> commentLine .)
    NUMBER          reduce using rule 11 (stmt -> commentLine .)
    $end            reduce using rule 11 (stmt -> commentLine .)
    ELSE            reduce using rule 11 (stmt -> commentLine .)


state 12

    (32) exprStmt -> simpleExpr .
    (38) simpleExpr -> simpleExpr . OR andExpr

    NAME            reduce using rule 32 (exprStmt -> simpleExpr .)
    IF              reduce using rule 32 (exprStmt -> simpleExpr .)
    WHILE           reduce using rule 32 (exprStmt -> simpleExpr .)
    RETURN          reduce using rule 32 (exprStmt -> simpleExpr .)
    INPUT           reduce using rule 32 (exprStmt -> simpleExpr .)
    PRINT           reduce using rule 32 (exprStmt -> simpleExpr .)
    LINE_COMMENT    reduce using rule 32 (exprStmt -> simpleExpr .)
    DEF             reduce using rule 32 (exprStmt -> simpleExpr .)
    CLASS           reduce using rule 32 (exprStmt -> simpleExpr .)
    NOT             reduce using rule 32 (exprStmt -> simpleExpr .)
    NUMBER          reduce using rule 32 (exprStmt -> simpleExpr .)
    $end            reduce using rule 32 (exprStmt -> simpleExpr .)
    ELSE            reduce using rule 32 (exprStmt -> simpleExpr .)
    OR              shift and go to state 39


state 13

    (12) declar -> varDeclar . SEMCOL

    SEMCOL          shift and go to state 40


state 14

    (13) declar -> funcDeclar .

    NAME            reduce using rule 13 (declar -> funcDeclar .)
    IF              reduce using rule 13 (declar -> funcDeclar .)
    WHILE           reduce using rule 13 (declar -> funcDeclar .)
    RETURN          reduce using rule 13 (declar -> funcDeclar .)
    INPUT           reduce using rule 13 (declar -> funcDeclar .)
    PRINT           reduce using rule 13 (declar -> funcDeclar .)
    LINE_COMMENT    reduce using rule 13 (declar -> funcDeclar .)
    DEF             reduce using rule 13 (declar -> funcDeclar .)
    CLASS           reduce using rule 13 (declar -> funcDeclar .)
    NOT             reduce using rule 13 (declar -> funcDeclar .)
    NUMBER          reduce using rule 13 (declar -> funcDeclar .)
    $end            reduce using rule 13 (declar -> funcDeclar .)
    ELSE            reduce using rule 13 (declar -> funcDeclar .)


state 15

    (14) declar -> objDeclar .

    NAME            reduce using rule 14 (declar -> objDeclar .)
    IF              reduce using rule 14 (declar -> objDeclar .)
    WHILE           reduce using rule 14 (declar -> objDeclar .)
    RETURN          reduce using rule 14 (declar -> objDeclar .)
    INPUT           reduce using rule 14 (declar -> objDeclar .)
    PRINT           reduce using rule 14 (declar -> objDeclar .)
    LINE_COMMENT    reduce using rule 14 (declar -> objDeclar .)
    DEF             reduce using rule 14 (declar -> objDeclar .)
    CLASS           reduce using rule 14 (declar -> objDeclar .)
    NOT             reduce using rule 14 (declar -> objDeclar .)
    NUMBER          reduce using rule 14 (declar -> objDeclar .)
    $end            reduce using rule 14 (declar -> objDeclar .)
    ELSE            reduce using rule 14 (declar -> objDeclar .)


state 16

    (27) call -> NAME .
    (28) call -> NAME . POINT call
    (29) call -> NAME . LPARENT RPARENT
    (30) call -> NAME . LPARENT params RPARENT
    (15) varDeclar -> NAME . ASSIGN STRING
    (16) varDeclar -> NAME . ASSIGN NUMBER
    (17) varDeclar -> NAME . ASSIGN NAME
    (18) varDeclar -> NAME . ASSIGN objConstruct

  ! shift/reduce conflict for POINT resolved as shift
    SEMCOL          reduce using rule 27 (call -> NAME .)
    PROD            reduce using rule 27 (call -> NAME .)
    DIV             reduce using rule 27 (call -> NAME .)
    LTE             reduce using rule 27 (call -> NAME .)
    LT              reduce using rule 27 (call -> NAME .)
    GTE             reduce using rule 27 (call -> NAME .)
    GT              reduce using rule 27 (call -> NAME .)
    EQ              reduce using rule 27 (call -> NAME .)
    NEQ             reduce using rule 27 (call -> NAME .)
    SUM             reduce using rule 27 (call -> NAME .)
    SUBST           reduce using rule 27 (call -> NAME .)
    AND             reduce using rule 27 (call -> NAME .)
    OR              reduce using rule 27 (call -> NAME .)
    NAME            reduce using rule 27 (call -> NAME .)
    IF              reduce using rule 27 (call -> NAME .)
    WHILE           reduce using rule 27 (call -> NAME .)
    RETURN          reduce using rule 27 (call -> NAME .)
    INPUT           reduce using rule 27 (call -> NAME .)
    PRINT           reduce using rule 27 (call -> NAME .)
    LINE_COMMENT    reduce using rule 27 (call -> NAME .)
    DEF             reduce using rule 27 (call -> NAME .)
    CLASS           reduce using rule 27 (call -> NAME .)
    NOT             reduce using rule 27 (call -> NAME .)
    NUMBER          reduce using rule 27 (call -> NAME .)
    $end            reduce using rule 27 (call -> NAME .)
    ELSE            reduce using rule 27 (call -> NAME .)
    POINT           shift and go to state 41
    LPARENT         shift and go to state 42
    ASSIGN          shift and go to state 43

  ! POINT           [ reduce using rule 27 (call -> NAME .) ]


state 17

    (33) selectionStmt -> IF . simpleExpr COL suite
    (34) selectionStmt -> IF . simpleExpr COL suite ELSE COL suite
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    simpleExpr                     shift and go to state 44
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 18

    (35) iterationStmt -> WHILE . simpleExpr COL suite
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    simpleExpr                     shift and go to state 47
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 19

    (36) returnStmt -> RETURN .
    (37) returnStmt -> RETURN . simpleExpr
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    SEMCOL          reduce using rule 36 (returnStmt -> RETURN .)
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    simpleExpr                     shift and go to state 48
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 20

    (62) inputStmt -> INPUT . LPARENT RPARENT

    LPARENT         shift and go to state 49


state 21

    (63) outputStmt -> PRINT . LPARENT STRING RPARENT

    LPARENT         shift and go to state 50


state 22

    (64) commentLine -> LINE_COMMENT .

    NAME            reduce using rule 64 (commentLine -> LINE_COMMENT .)
    IF              reduce using rule 64 (commentLine -> LINE_COMMENT .)
    WHILE           reduce using rule 64 (commentLine -> LINE_COMMENT .)
    RETURN          reduce using rule 64 (commentLine -> LINE_COMMENT .)
    INPUT           reduce using rule 64 (commentLine -> LINE_COMMENT .)
    PRINT           reduce using rule 64 (commentLine -> LINE_COMMENT .)
    LINE_COMMENT    reduce using rule 64 (commentLine -> LINE_COMMENT .)
    DEF             reduce using rule 64 (commentLine -> LINE_COMMENT .)
    CLASS           reduce using rule 64 (commentLine -> LINE_COMMENT .)
    NOT             reduce using rule 64 (commentLine -> LINE_COMMENT .)
    NUMBER          reduce using rule 64 (commentLine -> LINE_COMMENT .)
    $end            reduce using rule 64 (commentLine -> LINE_COMMENT .)
    ELSE            reduce using rule 64 (commentLine -> LINE_COMMENT .)


state 23

    (39) simpleExpr -> andExpr .
    (40) andExpr -> andExpr . AND unaryRelExpr

    OR              reduce using rule 39 (simpleExpr -> andExpr .)
    NAME            reduce using rule 39 (simpleExpr -> andExpr .)
    IF              reduce using rule 39 (simpleExpr -> andExpr .)
    WHILE           reduce using rule 39 (simpleExpr -> andExpr .)
    RETURN          reduce using rule 39 (simpleExpr -> andExpr .)
    INPUT           reduce using rule 39 (simpleExpr -> andExpr .)
    PRINT           reduce using rule 39 (simpleExpr -> andExpr .)
    LINE_COMMENT    reduce using rule 39 (simpleExpr -> andExpr .)
    DEF             reduce using rule 39 (simpleExpr -> andExpr .)
    CLASS           reduce using rule 39 (simpleExpr -> andExpr .)
    NOT             reduce using rule 39 (simpleExpr -> andExpr .)
    NUMBER          reduce using rule 39 (simpleExpr -> andExpr .)
    $end            reduce using rule 39 (simpleExpr -> andExpr .)
    ELSE            reduce using rule 39 (simpleExpr -> andExpr .)
    COL             reduce using rule 39 (simpleExpr -> andExpr .)
    SEMCOL          reduce using rule 39 (simpleExpr -> andExpr .)
    AND             shift and go to state 51


state 24

    (59) opElement -> NUMBER .

    PROD            reduce using rule 59 (opElement -> NUMBER .)
    DIV             reduce using rule 59 (opElement -> NUMBER .)
    LTE             reduce using rule 59 (opElement -> NUMBER .)
    LT              reduce using rule 59 (opElement -> NUMBER .)
    GTE             reduce using rule 59 (opElement -> NUMBER .)
    GT              reduce using rule 59 (opElement -> NUMBER .)
    EQ              reduce using rule 59 (opElement -> NUMBER .)
    NEQ             reduce using rule 59 (opElement -> NUMBER .)
    SUM             reduce using rule 59 (opElement -> NUMBER .)
    SUBST           reduce using rule 59 (opElement -> NUMBER .)
    AND             reduce using rule 59 (opElement -> NUMBER .)
    OR              reduce using rule 59 (opElement -> NUMBER .)
    NAME            reduce using rule 59 (opElement -> NUMBER .)
    IF              reduce using rule 59 (opElement -> NUMBER .)
    WHILE           reduce using rule 59 (opElement -> NUMBER .)
    RETURN          reduce using rule 59 (opElement -> NUMBER .)
    INPUT           reduce using rule 59 (opElement -> NUMBER .)
    PRINT           reduce using rule 59 (opElement -> NUMBER .)
    LINE_COMMENT    reduce using rule 59 (opElement -> NUMBER .)
    DEF             reduce using rule 59 (opElement -> NUMBER .)
    CLASS           reduce using rule 59 (opElement -> NUMBER .)
    NOT             reduce using rule 59 (opElement -> NUMBER .)
    NUMBER          reduce using rule 59 (opElement -> NUMBER .)
    $end            reduce using rule 59 (opElement -> NUMBER .)
    ELSE            reduce using rule 59 (opElement -> NUMBER .)
    COL             reduce using rule 59 (opElement -> NUMBER .)
    SEMCOL          reduce using rule 59 (opElement -> NUMBER .)


state 25

    (19) funcDeclar -> DEF . NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> DEF . NAME LPARENT params RPARENT COL suite

    NAME            shift and go to state 52


state 26

    (24) objDeclar -> CLASS . NAME COL suite

    NAME            shift and go to state 53


state 27

    (41) andExpr -> unaryRelExpr .

    AND             reduce using rule 41 (andExpr -> unaryRelExpr .)
    OR              reduce using rule 41 (andExpr -> unaryRelExpr .)
    NAME            reduce using rule 41 (andExpr -> unaryRelExpr .)
    IF              reduce using rule 41 (andExpr -> unaryRelExpr .)
    WHILE           reduce using rule 41 (andExpr -> unaryRelExpr .)
    RETURN          reduce using rule 41 (andExpr -> unaryRelExpr .)
    INPUT           reduce using rule 41 (andExpr -> unaryRelExpr .)
    PRINT           reduce using rule 41 (andExpr -> unaryRelExpr .)
    LINE_COMMENT    reduce using rule 41 (andExpr -> unaryRelExpr .)
    DEF             reduce using rule 41 (andExpr -> unaryRelExpr .)
    CLASS           reduce using rule 41 (andExpr -> unaryRelExpr .)
    NOT             reduce using rule 41 (andExpr -> unaryRelExpr .)
    NUMBER          reduce using rule 41 (andExpr -> unaryRelExpr .)
    $end            reduce using rule 41 (andExpr -> unaryRelExpr .)
    ELSE            reduce using rule 41 (andExpr -> unaryRelExpr .)
    COL             reduce using rule 41 (andExpr -> unaryRelExpr .)
    SEMCOL          reduce using rule 41 (andExpr -> unaryRelExpr .)


state 28

    (42) unaryRelExpr -> NOT . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    unaryRelExpr                   shift and go to state 54
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 29

    (43) unaryRelExpr -> relExpr .

    AND             reduce using rule 43 (unaryRelExpr -> relExpr .)
    OR              reduce using rule 43 (unaryRelExpr -> relExpr .)
    NAME            reduce using rule 43 (unaryRelExpr -> relExpr .)
    IF              reduce using rule 43 (unaryRelExpr -> relExpr .)
    WHILE           reduce using rule 43 (unaryRelExpr -> relExpr .)
    RETURN          reduce using rule 43 (unaryRelExpr -> relExpr .)
    INPUT           reduce using rule 43 (unaryRelExpr -> relExpr .)
    PRINT           reduce using rule 43 (unaryRelExpr -> relExpr .)
    LINE_COMMENT    reduce using rule 43 (unaryRelExpr -> relExpr .)
    DEF             reduce using rule 43 (unaryRelExpr -> relExpr .)
    CLASS           reduce using rule 43 (unaryRelExpr -> relExpr .)
    NOT             reduce using rule 43 (unaryRelExpr -> relExpr .)
    NUMBER          reduce using rule 43 (unaryRelExpr -> relExpr .)
    $end            reduce using rule 43 (unaryRelExpr -> relExpr .)
    ELSE            reduce using rule 43 (unaryRelExpr -> relExpr .)
    COL             reduce using rule 43 (unaryRelExpr -> relExpr .)
    SEMCOL          reduce using rule 43 (unaryRelExpr -> relExpr .)


state 30

    (44) relExpr -> sumExpr . relop sumExpr
    (45) relExpr -> sumExpr .
    (52) sumExpr -> sumExpr . sumop term
    (46) relop -> . LTE
    (47) relop -> . LT
    (48) relop -> . GTE
    (49) relop -> . GT
    (50) relop -> . EQ
    (51) relop -> . NEQ
    (54) sumop -> . SUM
    (55) sumop -> . SUBST

    AND             reduce using rule 45 (relExpr -> sumExpr .)
    OR              reduce using rule 45 (relExpr -> sumExpr .)
    NAME            reduce using rule 45 (relExpr -> sumExpr .)
    IF              reduce using rule 45 (relExpr -> sumExpr .)
    WHILE           reduce using rule 45 (relExpr -> sumExpr .)
    RETURN          reduce using rule 45 (relExpr -> sumExpr .)
    INPUT           reduce using rule 45 (relExpr -> sumExpr .)
    PRINT           reduce using rule 45 (relExpr -> sumExpr .)
    LINE_COMMENT    reduce using rule 45 (relExpr -> sumExpr .)
    DEF             reduce using rule 45 (relExpr -> sumExpr .)
    CLASS           reduce using rule 45 (relExpr -> sumExpr .)
    NOT             reduce using rule 45 (relExpr -> sumExpr .)
    NUMBER          reduce using rule 45 (relExpr -> sumExpr .)
    $end            reduce using rule 45 (relExpr -> sumExpr .)
    ELSE            reduce using rule 45 (relExpr -> sumExpr .)
    COL             reduce using rule 45 (relExpr -> sumExpr .)
    SEMCOL          reduce using rule 45 (relExpr -> sumExpr .)
    LTE             shift and go to state 57
    LT              shift and go to state 58
    GTE             shift and go to state 59
    GT              shift and go to state 60
    EQ              shift and go to state 61
    NEQ             shift and go to state 62
    SUM             shift and go to state 63
    SUBST           shift and go to state 64

    relop                          shift and go to state 55
    sumop                          shift and go to state 56

state 31

    (53) sumExpr -> term .
    (56) term -> term . mulop opElement
    (60) mulop -> . PROD
    (61) mulop -> . DIV

    LTE             reduce using rule 53 (sumExpr -> term .)
    LT              reduce using rule 53 (sumExpr -> term .)
    GTE             reduce using rule 53 (sumExpr -> term .)
    GT              reduce using rule 53 (sumExpr -> term .)
    EQ              reduce using rule 53 (sumExpr -> term .)
    NEQ             reduce using rule 53 (sumExpr -> term .)
    SUM             reduce using rule 53 (sumExpr -> term .)
    SUBST           reduce using rule 53 (sumExpr -> term .)
    AND             reduce using rule 53 (sumExpr -> term .)
    OR              reduce using rule 53 (sumExpr -> term .)
    NAME            reduce using rule 53 (sumExpr -> term .)
    IF              reduce using rule 53 (sumExpr -> term .)
    WHILE           reduce using rule 53 (sumExpr -> term .)
    RETURN          reduce using rule 53 (sumExpr -> term .)
    INPUT           reduce using rule 53 (sumExpr -> term .)
    PRINT           reduce using rule 53 (sumExpr -> term .)
    LINE_COMMENT    reduce using rule 53 (sumExpr -> term .)
    DEF             reduce using rule 53 (sumExpr -> term .)
    CLASS           reduce using rule 53 (sumExpr -> term .)
    NOT             reduce using rule 53 (sumExpr -> term .)
    NUMBER          reduce using rule 53 (sumExpr -> term .)
    $end            reduce using rule 53 (sumExpr -> term .)
    ELSE            reduce using rule 53 (sumExpr -> term .)
    COL             reduce using rule 53 (sumExpr -> term .)
    SEMCOL          reduce using rule 53 (sumExpr -> term .)
    PROD            shift and go to state 66
    DIV             shift and go to state 67

    mulop                          shift and go to state 65

state 32

    (57) term -> opElement .

    PROD            reduce using rule 57 (term -> opElement .)
    DIV             reduce using rule 57 (term -> opElement .)
    LTE             reduce using rule 57 (term -> opElement .)
    LT              reduce using rule 57 (term -> opElement .)
    GTE             reduce using rule 57 (term -> opElement .)
    GT              reduce using rule 57 (term -> opElement .)
    EQ              reduce using rule 57 (term -> opElement .)
    NEQ             reduce using rule 57 (term -> opElement .)
    SUM             reduce using rule 57 (term -> opElement .)
    SUBST           reduce using rule 57 (term -> opElement .)
    AND             reduce using rule 57 (term -> opElement .)
    OR              reduce using rule 57 (term -> opElement .)
    NAME            reduce using rule 57 (term -> opElement .)
    IF              reduce using rule 57 (term -> opElement .)
    WHILE           reduce using rule 57 (term -> opElement .)
    RETURN          reduce using rule 57 (term -> opElement .)
    INPUT           reduce using rule 57 (term -> opElement .)
    PRINT           reduce using rule 57 (term -> opElement .)
    LINE_COMMENT    reduce using rule 57 (term -> opElement .)
    DEF             reduce using rule 57 (term -> opElement .)
    CLASS           reduce using rule 57 (term -> opElement .)
    NOT             reduce using rule 57 (term -> opElement .)
    NUMBER          reduce using rule 57 (term -> opElement .)
    $end            reduce using rule 57 (term -> opElement .)
    ELSE            reduce using rule 57 (term -> opElement .)
    COL             reduce using rule 57 (term -> opElement .)
    SEMCOL          reduce using rule 57 (term -> opElement .)


state 33

    (2) suite -> stmt suite .

    $end            reduce using rule 2 (suite -> stmt suite .)
    ELSE            reduce using rule 2 (suite -> stmt suite .)
    NAME            reduce using rule 2 (suite -> stmt suite .)
    IF              reduce using rule 2 (suite -> stmt suite .)
    WHILE           reduce using rule 2 (suite -> stmt suite .)
    RETURN          reduce using rule 2 (suite -> stmt suite .)
    INPUT           reduce using rule 2 (suite -> stmt suite .)
    PRINT           reduce using rule 2 (suite -> stmt suite .)
    LINE_COMMENT    reduce using rule 2 (suite -> stmt suite .)
    DEF             reduce using rule 2 (suite -> stmt suite .)
    CLASS           reduce using rule 2 (suite -> stmt suite .)
    NOT             reduce using rule 2 (suite -> stmt suite .)
    NUMBER          reduce using rule 2 (suite -> stmt suite .)


state 34

    (5) stmt -> call SEMCOL .

    NAME            reduce using rule 5 (stmt -> call SEMCOL .)
    IF              reduce using rule 5 (stmt -> call SEMCOL .)
    WHILE           reduce using rule 5 (stmt -> call SEMCOL .)
    RETURN          reduce using rule 5 (stmt -> call SEMCOL .)
    INPUT           reduce using rule 5 (stmt -> call SEMCOL .)
    PRINT           reduce using rule 5 (stmt -> call SEMCOL .)
    LINE_COMMENT    reduce using rule 5 (stmt -> call SEMCOL .)
    DEF             reduce using rule 5 (stmt -> call SEMCOL .)
    CLASS           reduce using rule 5 (stmt -> call SEMCOL .)
    NOT             reduce using rule 5 (stmt -> call SEMCOL .)
    NUMBER          reduce using rule 5 (stmt -> call SEMCOL .)
    $end            reduce using rule 5 (stmt -> call SEMCOL .)
    ELSE            reduce using rule 5 (stmt -> call SEMCOL .)


state 35

    (31) call -> call POINT . call
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NAME            shift and go to state 46

    call                           shift and go to state 68

state 36

    (8) stmt -> returnStmt SEMCOL .

    NAME            reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    IF              reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    WHILE           reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    RETURN          reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    INPUT           reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    PRINT           reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    DEF             reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    CLASS           reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    NOT             reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    NUMBER          reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    $end            reduce using rule 8 (stmt -> returnStmt SEMCOL .)
    ELSE            reduce using rule 8 (stmt -> returnStmt SEMCOL .)


state 37

    (9) stmt -> inputStmt SEMCOL .

    NAME            reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    IF              reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    WHILE           reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    RETURN          reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    INPUT           reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    PRINT           reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    DEF             reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    CLASS           reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    NOT             reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    NUMBER          reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    $end            reduce using rule 9 (stmt -> inputStmt SEMCOL .)
    ELSE            reduce using rule 9 (stmt -> inputStmt SEMCOL .)


state 38

    (10) stmt -> outputStmt SEMCOL .

    NAME            reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    IF              reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    WHILE           reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    RETURN          reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    INPUT           reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    PRINT           reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    DEF             reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    CLASS           reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    NOT             reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    NUMBER          reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    $end            reduce using rule 10 (stmt -> outputStmt SEMCOL .)
    ELSE            reduce using rule 10 (stmt -> outputStmt SEMCOL .)


state 39

    (38) simpleExpr -> simpleExpr OR . andExpr
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    andExpr                        shift and go to state 69
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 40

    (12) declar -> varDeclar SEMCOL .

    NAME            reduce using rule 12 (declar -> varDeclar SEMCOL .)
    IF              reduce using rule 12 (declar -> varDeclar SEMCOL .)
    WHILE           reduce using rule 12 (declar -> varDeclar SEMCOL .)
    RETURN          reduce using rule 12 (declar -> varDeclar SEMCOL .)
    INPUT           reduce using rule 12 (declar -> varDeclar SEMCOL .)
    PRINT           reduce using rule 12 (declar -> varDeclar SEMCOL .)
    LINE_COMMENT    reduce using rule 12 (declar -> varDeclar SEMCOL .)
    DEF             reduce using rule 12 (declar -> varDeclar SEMCOL .)
    CLASS           reduce using rule 12 (declar -> varDeclar SEMCOL .)
    NOT             reduce using rule 12 (declar -> varDeclar SEMCOL .)
    NUMBER          reduce using rule 12 (declar -> varDeclar SEMCOL .)
    $end            reduce using rule 12 (declar -> varDeclar SEMCOL .)
    ELSE            reduce using rule 12 (declar -> varDeclar SEMCOL .)


state 41

    (28) call -> NAME POINT . call
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NAME            shift and go to state 46

    call                           shift and go to state 70

state 42

    (29) call -> NAME LPARENT . RPARENT
    (30) call -> NAME LPARENT . params RPARENT
    (21) params -> . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    RPARENT         shift and go to state 72
    NAME            shift and go to state 71

    params                         shift and go to state 73
    paramsList                     shift and go to state 74

state 43

    (15) varDeclar -> NAME ASSIGN . STRING
    (16) varDeclar -> NAME ASSIGN . NUMBER
    (17) varDeclar -> NAME ASSIGN . NAME
    (18) varDeclar -> NAME ASSIGN . objConstruct
    (25) objConstruct -> . NAME LPARENT RPARENT
    (26) objConstruct -> . NAME LPARENT params RPARENT

    STRING          shift and go to state 76
    NUMBER          shift and go to state 77
    NAME            shift and go to state 75

    objConstruct                   shift and go to state 78

state 44

    (33) selectionStmt -> IF simpleExpr . COL suite
    (34) selectionStmt -> IF simpleExpr . COL suite ELSE COL suite
    (38) simpleExpr -> simpleExpr . OR andExpr

    COL             shift and go to state 79
    OR              shift and go to state 39


state 45

    (58) opElement -> call .
    (31) call -> call . POINT call

    PROD            reduce using rule 58 (opElement -> call .)
    DIV             reduce using rule 58 (opElement -> call .)
    LTE             reduce using rule 58 (opElement -> call .)
    LT              reduce using rule 58 (opElement -> call .)
    GTE             reduce using rule 58 (opElement -> call .)
    GT              reduce using rule 58 (opElement -> call .)
    EQ              reduce using rule 58 (opElement -> call .)
    NEQ             reduce using rule 58 (opElement -> call .)
    SUM             reduce using rule 58 (opElement -> call .)
    SUBST           reduce using rule 58 (opElement -> call .)
    AND             reduce using rule 58 (opElement -> call .)
    COL             reduce using rule 58 (opElement -> call .)
    OR              reduce using rule 58 (opElement -> call .)
    SEMCOL          reduce using rule 58 (opElement -> call .)
    NAME            reduce using rule 58 (opElement -> call .)
    IF              reduce using rule 58 (opElement -> call .)
    WHILE           reduce using rule 58 (opElement -> call .)
    RETURN          reduce using rule 58 (opElement -> call .)
    INPUT           reduce using rule 58 (opElement -> call .)
    PRINT           reduce using rule 58 (opElement -> call .)
    LINE_COMMENT    reduce using rule 58 (opElement -> call .)
    DEF             reduce using rule 58 (opElement -> call .)
    CLASS           reduce using rule 58 (opElement -> call .)
    NOT             reduce using rule 58 (opElement -> call .)
    NUMBER          reduce using rule 58 (opElement -> call .)
    $end            reduce using rule 58 (opElement -> call .)
    ELSE            reduce using rule 58 (opElement -> call .)
    POINT           shift and go to state 35


state 46

    (27) call -> NAME .
    (28) call -> NAME . POINT call
    (29) call -> NAME . LPARENT RPARENT
    (30) call -> NAME . LPARENT params RPARENT

  ! shift/reduce conflict for POINT resolved as shift
    PROD            reduce using rule 27 (call -> NAME .)
    DIV             reduce using rule 27 (call -> NAME .)
    LTE             reduce using rule 27 (call -> NAME .)
    LT              reduce using rule 27 (call -> NAME .)
    GTE             reduce using rule 27 (call -> NAME .)
    GT              reduce using rule 27 (call -> NAME .)
    EQ              reduce using rule 27 (call -> NAME .)
    NEQ             reduce using rule 27 (call -> NAME .)
    SUM             reduce using rule 27 (call -> NAME .)
    SUBST           reduce using rule 27 (call -> NAME .)
    AND             reduce using rule 27 (call -> NAME .)
    COL             reduce using rule 27 (call -> NAME .)
    OR              reduce using rule 27 (call -> NAME .)
    SEMCOL          reduce using rule 27 (call -> NAME .)
    NAME            reduce using rule 27 (call -> NAME .)
    IF              reduce using rule 27 (call -> NAME .)
    WHILE           reduce using rule 27 (call -> NAME .)
    RETURN          reduce using rule 27 (call -> NAME .)
    INPUT           reduce using rule 27 (call -> NAME .)
    PRINT           reduce using rule 27 (call -> NAME .)
    LINE_COMMENT    reduce using rule 27 (call -> NAME .)
    DEF             reduce using rule 27 (call -> NAME .)
    CLASS           reduce using rule 27 (call -> NAME .)
    NOT             reduce using rule 27 (call -> NAME .)
    NUMBER          reduce using rule 27 (call -> NAME .)
    $end            reduce using rule 27 (call -> NAME .)
    ELSE            reduce using rule 27 (call -> NAME .)
    POINT           shift and go to state 41
    LPARENT         shift and go to state 42

  ! POINT           [ reduce using rule 27 (call -> NAME .) ]


state 47

    (35) iterationStmt -> WHILE simpleExpr . COL suite
    (38) simpleExpr -> simpleExpr . OR andExpr

    COL             shift and go to state 80
    OR              shift and go to state 39


state 48

    (37) returnStmt -> RETURN simpleExpr .
    (38) simpleExpr -> simpleExpr . OR andExpr

    SEMCOL          reduce using rule 37 (returnStmt -> RETURN simpleExpr .)
    OR              shift and go to state 39


state 49

    (62) inputStmt -> INPUT LPARENT . RPARENT

    RPARENT         shift and go to state 81


state 50

    (63) outputStmt -> PRINT LPARENT . STRING RPARENT

    STRING          shift and go to state 82


state 51

    (40) andExpr -> andExpr AND . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    unaryRelExpr                   shift and go to state 83
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 52

    (19) funcDeclar -> DEF NAME . LPARENT RPARENT COL suite
    (20) funcDeclar -> DEF NAME . LPARENT params RPARENT COL suite

    LPARENT         shift and go to state 84


state 53

    (24) objDeclar -> CLASS NAME . COL suite

    COL             shift and go to state 85


state 54

    (42) unaryRelExpr -> NOT unaryRelExpr .

    AND             reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    OR              reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    NAME            reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    IF              reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    WHILE           reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    RETURN          reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    INPUT           reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    PRINT           reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    LINE_COMMENT    reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    DEF             reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    CLASS           reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    NOT             reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    NUMBER          reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    $end            reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    ELSE            reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    COL             reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)
    SEMCOL          reduce using rule 42 (unaryRelExpr -> NOT unaryRelExpr .)


state 55

    (44) relExpr -> sumExpr relop . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    sumExpr                        shift and go to state 86
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 56

    (52) sumExpr -> sumExpr sumop . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    term                           shift and go to state 87
    opElement                      shift and go to state 32
    call                           shift and go to state 45

state 57

    (46) relop -> LTE .

    NUMBER          reduce using rule 46 (relop -> LTE .)
    NAME            reduce using rule 46 (relop -> LTE .)


state 58

    (47) relop -> LT .

    NUMBER          reduce using rule 47 (relop -> LT .)
    NAME            reduce using rule 47 (relop -> LT .)


state 59

    (48) relop -> GTE .

    NUMBER          reduce using rule 48 (relop -> GTE .)
    NAME            reduce using rule 48 (relop -> GTE .)


state 60

    (49) relop -> GT .

    NUMBER          reduce using rule 49 (relop -> GT .)
    NAME            reduce using rule 49 (relop -> GT .)


state 61

    (50) relop -> EQ .

    NUMBER          reduce using rule 50 (relop -> EQ .)
    NAME            reduce using rule 50 (relop -> EQ .)


state 62

    (51) relop -> NEQ .

    NUMBER          reduce using rule 51 (relop -> NEQ .)
    NAME            reduce using rule 51 (relop -> NEQ .)


state 63

    (54) sumop -> SUM .

    NUMBER          reduce using rule 54 (sumop -> SUM .)
    NAME            reduce using rule 54 (sumop -> SUM .)


state 64

    (55) sumop -> SUBST .

    NUMBER          reduce using rule 55 (sumop -> SUBST .)
    NAME            reduce using rule 55 (sumop -> SUBST .)


state 65

    (56) term -> term mulop . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call

    NUMBER          shift and go to state 24
    NAME            shift and go to state 46

    opElement                      shift and go to state 88
    call                           shift and go to state 45

state 66

    (60) mulop -> PROD .

    NUMBER          reduce using rule 60 (mulop -> PROD .)
    NAME            reduce using rule 60 (mulop -> PROD .)


state 67

    (61) mulop -> DIV .

    NUMBER          reduce using rule 61 (mulop -> DIV .)
    NAME            reduce using rule 61 (mulop -> DIV .)


state 68

    (31) call -> call POINT call .
    (31) call -> call . POINT call

  ! shift/reduce conflict for POINT resolved as shift
    SEMCOL          reduce using rule 31 (call -> call POINT call .)
    PROD            reduce using rule 31 (call -> call POINT call .)
    DIV             reduce using rule 31 (call -> call POINT call .)
    LTE             reduce using rule 31 (call -> call POINT call .)
    LT              reduce using rule 31 (call -> call POINT call .)
    GTE             reduce using rule 31 (call -> call POINT call .)
    GT              reduce using rule 31 (call -> call POINT call .)
    EQ              reduce using rule 31 (call -> call POINT call .)
    NEQ             reduce using rule 31 (call -> call POINT call .)
    SUM             reduce using rule 31 (call -> call POINT call .)
    SUBST           reduce using rule 31 (call -> call POINT call .)
    AND             reduce using rule 31 (call -> call POINT call .)
    OR              reduce using rule 31 (call -> call POINT call .)
    NAME            reduce using rule 31 (call -> call POINT call .)
    IF              reduce using rule 31 (call -> call POINT call .)
    WHILE           reduce using rule 31 (call -> call POINT call .)
    RETURN          reduce using rule 31 (call -> call POINT call .)
    INPUT           reduce using rule 31 (call -> call POINT call .)
    PRINT           reduce using rule 31 (call -> call POINT call .)
    LINE_COMMENT    reduce using rule 31 (call -> call POINT call .)
    DEF             reduce using rule 31 (call -> call POINT call .)
    CLASS           reduce using rule 31 (call -> call POINT call .)
    NOT             reduce using rule 31 (call -> call POINT call .)
    NUMBER          reduce using rule 31 (call -> call POINT call .)
    $end            reduce using rule 31 (call -> call POINT call .)
    ELSE            reduce using rule 31 (call -> call POINT call .)
    COL             reduce using rule 31 (call -> call POINT call .)
    POINT           shift and go to state 35

  ! POINT           [ reduce using rule 31 (call -> call POINT call .) ]


state 69

    (38) simpleExpr -> simpleExpr OR andExpr .
    (40) andExpr -> andExpr . AND unaryRelExpr

    OR              reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    NAME            reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    IF              reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    WHILE           reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    RETURN          reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    INPUT           reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    PRINT           reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    LINE_COMMENT    reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    DEF             reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    CLASS           reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    NOT             reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    NUMBER          reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    $end            reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    ELSE            reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    COL             reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    SEMCOL          reduce using rule 38 (simpleExpr -> simpleExpr OR andExpr .)
    AND             shift and go to state 51


state 70

    (28) call -> NAME POINT call .
    (31) call -> call . POINT call

  ! shift/reduce conflict for POINT resolved as shift
    SEMCOL          reduce using rule 28 (call -> NAME POINT call .)
    PROD            reduce using rule 28 (call -> NAME POINT call .)
    DIV             reduce using rule 28 (call -> NAME POINT call .)
    LTE             reduce using rule 28 (call -> NAME POINT call .)
    LT              reduce using rule 28 (call -> NAME POINT call .)
    GTE             reduce using rule 28 (call -> NAME POINT call .)
    GT              reduce using rule 28 (call -> NAME POINT call .)
    EQ              reduce using rule 28 (call -> NAME POINT call .)
    NEQ             reduce using rule 28 (call -> NAME POINT call .)
    SUM             reduce using rule 28 (call -> NAME POINT call .)
    SUBST           reduce using rule 28 (call -> NAME POINT call .)
    AND             reduce using rule 28 (call -> NAME POINT call .)
    OR              reduce using rule 28 (call -> NAME POINT call .)
    NAME            reduce using rule 28 (call -> NAME POINT call .)
    IF              reduce using rule 28 (call -> NAME POINT call .)
    WHILE           reduce using rule 28 (call -> NAME POINT call .)
    RETURN          reduce using rule 28 (call -> NAME POINT call .)
    INPUT           reduce using rule 28 (call -> NAME POINT call .)
    PRINT           reduce using rule 28 (call -> NAME POINT call .)
    LINE_COMMENT    reduce using rule 28 (call -> NAME POINT call .)
    DEF             reduce using rule 28 (call -> NAME POINT call .)
    CLASS           reduce using rule 28 (call -> NAME POINT call .)
    NOT             reduce using rule 28 (call -> NAME POINT call .)
    NUMBER          reduce using rule 28 (call -> NAME POINT call .)
    $end            reduce using rule 28 (call -> NAME POINT call .)
    ELSE            reduce using rule 28 (call -> NAME POINT call .)
    COL             reduce using rule 28 (call -> NAME POINT call .)
    POINT           shift and go to state 35

  ! POINT           [ reduce using rule 28 (call -> NAME POINT call .) ]


state 71

    (22) paramsList -> NAME . COMA paramsList
    (23) paramsList -> NAME .

    COMA            shift and go to state 89
    RPARENT         reduce using rule 23 (paramsList -> NAME .)


state 72

    (29) call -> NAME LPARENT RPARENT .

    SEMCOL          reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    POINT           reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    PROD            reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    DIV             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    LTE             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    LT              reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    GTE             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    GT              reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    EQ              reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    NEQ             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    SUM             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    SUBST           reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    AND             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    OR              reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    NAME            reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    IF              reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    WHILE           reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    RETURN          reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    INPUT           reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    PRINT           reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    LINE_COMMENT    reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    DEF             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    CLASS           reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    NOT             reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    NUMBER          reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    $end            reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    ELSE            reduce using rule 29 (call -> NAME LPARENT RPARENT .)
    COL             reduce using rule 29 (call -> NAME LPARENT RPARENT .)


state 73

    (30) call -> NAME LPARENT params . RPARENT

    RPARENT         shift and go to state 90


state 74

    (21) params -> paramsList .

    RPARENT         reduce using rule 21 (params -> paramsList .)


state 75

    (17) varDeclar -> NAME ASSIGN NAME .
    (25) objConstruct -> NAME . LPARENT RPARENT
    (26) objConstruct -> NAME . LPARENT params RPARENT

    SEMCOL          reduce using rule 17 (varDeclar -> NAME ASSIGN NAME .)
    LPARENT         shift and go to state 91


state 76

    (15) varDeclar -> NAME ASSIGN STRING .

    SEMCOL          reduce using rule 15 (varDeclar -> NAME ASSIGN STRING .)


state 77

    (16) varDeclar -> NAME ASSIGN NUMBER .

    SEMCOL          reduce using rule 16 (varDeclar -> NAME ASSIGN NUMBER .)


state 78

    (18) varDeclar -> NAME ASSIGN objConstruct .

    SEMCOL          reduce using rule 18 (varDeclar -> NAME ASSIGN objConstruct .)


state 79

    (33) selectionStmt -> IF simpleExpr COL . suite
    (34) selectionStmt -> IF simpleExpr COL . suite ELSE COL suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    simpleExpr                     shift and go to state 12
    suite                          shift and go to state 92
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 80

    (35) iterationStmt -> WHILE simpleExpr COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    simpleExpr                     shift and go to state 12
    suite                          shift and go to state 93
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 81

    (62) inputStmt -> INPUT LPARENT RPARENT .

    SEMCOL          reduce using rule 62 (inputStmt -> INPUT LPARENT RPARENT .)


state 82

    (63) outputStmt -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 94


state 83

    (40) andExpr -> andExpr AND unaryRelExpr .

    AND             reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    OR              reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    NAME            reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    IF              reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    WHILE           reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    RETURN          reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    INPUT           reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    PRINT           reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    LINE_COMMENT    reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    DEF             reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    CLASS           reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    NOT             reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    NUMBER          reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    $end            reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    ELSE            reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    COL             reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)
    SEMCOL          reduce using rule 40 (andExpr -> andExpr AND unaryRelExpr .)


state 84

    (19) funcDeclar -> DEF NAME LPARENT . RPARENT COL suite
    (20) funcDeclar -> DEF NAME LPARENT . params RPARENT COL suite
    (21) params -> . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    RPARENT         shift and go to state 95
    NAME            shift and go to state 71

    params                         shift and go to state 96
    paramsList                     shift and go to state 74

state 85

    (24) objDeclar -> CLASS NAME COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    suite                          shift and go to state 97
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    simpleExpr                     shift and go to state 12
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 86

    (44) relExpr -> sumExpr relop sumExpr .
    (52) sumExpr -> sumExpr . sumop term
    (54) sumop -> . SUM
    (55) sumop -> . SUBST

    AND             reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    OR              reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    NAME            reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    IF              reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    WHILE           reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    RETURN          reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    INPUT           reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    PRINT           reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    LINE_COMMENT    reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    DEF             reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    CLASS           reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    NOT             reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    NUMBER          reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    $end            reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    ELSE            reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    COL             reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    SEMCOL          reduce using rule 44 (relExpr -> sumExpr relop sumExpr .)
    SUM             shift and go to state 63
    SUBST           shift and go to state 64

    sumop                          shift and go to state 56

state 87

    (52) sumExpr -> sumExpr sumop term .
    (56) term -> term . mulop opElement
    (60) mulop -> . PROD
    (61) mulop -> . DIV

    LTE             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    LT              reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    GTE             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    GT              reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    EQ              reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    NEQ             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    SUM             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    SUBST           reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    AND             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    OR              reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    NAME            reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    IF              reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    WHILE           reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    RETURN          reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    INPUT           reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    PRINT           reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    LINE_COMMENT    reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    DEF             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    CLASS           reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    NOT             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    NUMBER          reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    $end            reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    ELSE            reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    COL             reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    SEMCOL          reduce using rule 52 (sumExpr -> sumExpr sumop term .)
    PROD            shift and go to state 66
    DIV             shift and go to state 67

    mulop                          shift and go to state 65

state 88

    (56) term -> term mulop opElement .

    PROD            reduce using rule 56 (term -> term mulop opElement .)
    DIV             reduce using rule 56 (term -> term mulop opElement .)
    LTE             reduce using rule 56 (term -> term mulop opElement .)
    LT              reduce using rule 56 (term -> term mulop opElement .)
    GTE             reduce using rule 56 (term -> term mulop opElement .)
    GT              reduce using rule 56 (term -> term mulop opElement .)
    EQ              reduce using rule 56 (term -> term mulop opElement .)
    NEQ             reduce using rule 56 (term -> term mulop opElement .)
    SUM             reduce using rule 56 (term -> term mulop opElement .)
    SUBST           reduce using rule 56 (term -> term mulop opElement .)
    AND             reduce using rule 56 (term -> term mulop opElement .)
    OR              reduce using rule 56 (term -> term mulop opElement .)
    NAME            reduce using rule 56 (term -> term mulop opElement .)
    IF              reduce using rule 56 (term -> term mulop opElement .)
    WHILE           reduce using rule 56 (term -> term mulop opElement .)
    RETURN          reduce using rule 56 (term -> term mulop opElement .)
    INPUT           reduce using rule 56 (term -> term mulop opElement .)
    PRINT           reduce using rule 56 (term -> term mulop opElement .)
    LINE_COMMENT    reduce using rule 56 (term -> term mulop opElement .)
    DEF             reduce using rule 56 (term -> term mulop opElement .)
    CLASS           reduce using rule 56 (term -> term mulop opElement .)
    NOT             reduce using rule 56 (term -> term mulop opElement .)
    NUMBER          reduce using rule 56 (term -> term mulop opElement .)
    $end            reduce using rule 56 (term -> term mulop opElement .)
    ELSE            reduce using rule 56 (term -> term mulop opElement .)
    COL             reduce using rule 56 (term -> term mulop opElement .)
    SEMCOL          reduce using rule 56 (term -> term mulop opElement .)


state 89

    (22) paramsList -> NAME COMA . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    NAME            shift and go to state 71

    paramsList                     shift and go to state 98

state 90

    (30) call -> NAME LPARENT params RPARENT .

    SEMCOL          reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    POINT           reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    PROD            reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    DIV             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    LTE             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    LT              reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    GTE             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    GT              reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    EQ              reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    NEQ             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    SUM             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    SUBST           reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    AND             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    OR              reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    NAME            reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    IF              reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    WHILE           reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    RETURN          reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    INPUT           reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    PRINT           reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    LINE_COMMENT    reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    DEF             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    CLASS           reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    NOT             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    NUMBER          reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    $end            reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    ELSE            reduce using rule 30 (call -> NAME LPARENT params RPARENT .)
    COL             reduce using rule 30 (call -> NAME LPARENT params RPARENT .)


state 91

    (25) objConstruct -> NAME LPARENT . RPARENT
    (26) objConstruct -> NAME LPARENT . params RPARENT
    (21) params -> . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    RPARENT         shift and go to state 99
    NAME            shift and go to state 71

    params                         shift and go to state 100
    paramsList                     shift and go to state 74

state 92

    (33) selectionStmt -> IF simpleExpr COL suite .
    (34) selectionStmt -> IF simpleExpr COL suite . ELSE COL suite

  ! shift/reduce conflict for ELSE resolved as shift
    NAME            reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    IF              reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    WHILE           reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    RETURN          reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    INPUT           reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    PRINT           reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    LINE_COMMENT    reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    DEF             reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    CLASS           reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    NOT             reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    NUMBER          reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    $end            reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .)
    ELSE            shift and go to state 101

  ! ELSE            [ reduce using rule 33 (selectionStmt -> IF simpleExpr COL suite .) ]


state 93

    (35) iterationStmt -> WHILE simpleExpr COL suite .

    NAME            reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    IF              reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    WHILE           reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    RETURN          reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    INPUT           reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    PRINT           reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    LINE_COMMENT    reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    DEF             reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    CLASS           reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    NOT             reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    NUMBER          reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    $end            reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)
    ELSE            reduce using rule 35 (iterationStmt -> WHILE simpleExpr COL suite .)


state 94

    (63) outputStmt -> PRINT LPARENT STRING RPARENT .

    SEMCOL          reduce using rule 63 (outputStmt -> PRINT LPARENT STRING RPARENT .)


state 95

    (19) funcDeclar -> DEF NAME LPARENT RPARENT . COL suite

    COL             shift and go to state 102


state 96

    (20) funcDeclar -> DEF NAME LPARENT params . RPARENT COL suite

    RPARENT         shift and go to state 103


state 97

    (24) objDeclar -> CLASS NAME COL suite .

    NAME            reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    IF              reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    WHILE           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    RETURN          reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    INPUT           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    PRINT           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    LINE_COMMENT    reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    DEF             reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    CLASS           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    NOT             reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    NUMBER          reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    $end            reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    ELSE            reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)


state 98

    (22) paramsList -> NAME COMA paramsList .

    RPARENT         reduce using rule 22 (paramsList -> NAME COMA paramsList .)


state 99

    (25) objConstruct -> NAME LPARENT RPARENT .

    SEMCOL          reduce using rule 25 (objConstruct -> NAME LPARENT RPARENT .)


state 100

    (26) objConstruct -> NAME LPARENT params . RPARENT

    RPARENT         shift and go to state 104


state 101

    (34) selectionStmt -> IF simpleExpr COL suite ELSE . COL suite

    COL             shift and go to state 105


state 102

    (19) funcDeclar -> DEF NAME LPARENT RPARENT COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    suite                          shift and go to state 106
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    simpleExpr                     shift and go to state 12
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 103

    (20) funcDeclar -> DEF NAME LPARENT params RPARENT . COL suite

    COL             shift and go to state 107


state 104

    (26) objConstruct -> NAME LPARENT params RPARENT .

    SEMCOL          reduce using rule 26 (objConstruct -> NAME LPARENT params RPARENT .)


state 105

    (34) selectionStmt -> IF simpleExpr COL suite ELSE COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    simpleExpr                     shift and go to state 12
    suite                          shift and go to state 108
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 106

    (19) funcDeclar -> DEF NAME LPARENT RPARENT COL suite .

    NAME            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    IF              reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    WHILE           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    RETURN          reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    INPUT           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    PRINT           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    LINE_COMMENT    reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    DEF             reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    CLASS           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NOT             reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NUMBER          reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    $end            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    ELSE            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)


state 107

    (20) funcDeclar -> DEF NAME LPARENT params RPARENT COL . suite
    (1) suite -> . stmt
    (2) suite -> . stmt suite
    (3) stmt -> . exprStmt
    (4) stmt -> . declar
    (5) stmt -> . call SEMCOL
    (6) stmt -> . selectionStmt
    (7) stmt -> . iterationStmt
    (8) stmt -> . returnStmt SEMCOL
    (9) stmt -> . inputStmt SEMCOL
    (10) stmt -> . outputStmt SEMCOL
    (11) stmt -> . commentLine
    (32) exprStmt -> . simpleExpr
    (12) declar -> . varDeclar SEMCOL
    (13) declar -> . funcDeclar
    (14) declar -> . objDeclar
    (27) call -> . NAME
    (28) call -> . NAME POINT call
    (29) call -> . NAME LPARENT RPARENT
    (30) call -> . NAME LPARENT params RPARENT
    (31) call -> . call POINT call
    (33) selectionStmt -> . IF simpleExpr COL suite
    (34) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (35) iterationStmt -> . WHILE simpleExpr COL suite
    (36) returnStmt -> . RETURN
    (37) returnStmt -> . RETURN simpleExpr
    (62) inputStmt -> . INPUT LPARENT RPARENT
    (63) outputStmt -> . PRINT LPARENT STRING RPARENT
    (64) commentLine -> . LINE_COMMENT
    (38) simpleExpr -> . simpleExpr OR andExpr
    (39) simpleExpr -> . andExpr
    (15) varDeclar -> . NAME ASSIGN STRING
    (16) varDeclar -> . NAME ASSIGN NUMBER
    (17) varDeclar -> . NAME ASSIGN NAME
    (18) varDeclar -> . NAME ASSIGN objConstruct
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (40) andExpr -> . andExpr AND unaryRelExpr
    (41) andExpr -> . unaryRelExpr
    (42) unaryRelExpr -> . NOT unaryRelExpr
    (43) unaryRelExpr -> . relExpr
    (44) relExpr -> . sumExpr relop sumExpr
    (45) relExpr -> . sumExpr
    (52) sumExpr -> . sumExpr sumop term
    (53) sumExpr -> . term
    (56) term -> . term mulop opElement
    (57) term -> . opElement
    (58) opElement -> . call
    (59) opElement -> . NUMBER

    NAME            shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    RETURN          shift and go to state 19
    INPUT           shift and go to state 20
    PRINT           shift and go to state 21
    LINE_COMMENT    shift and go to state 22
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 24

    suite                          shift and go to state 109
    stmt                           shift and go to state 2
    exprStmt                       shift and go to state 3
    declar                         shift and go to state 4
    call                           shift and go to state 5
    selectionStmt                  shift and go to state 6
    iterationStmt                  shift and go to state 7
    returnStmt                     shift and go to state 8
    inputStmt                      shift and go to state 9
    outputStmt                     shift and go to state 10
    commentLine                    shift and go to state 11
    simpleExpr                     shift and go to state 12
    varDeclar                      shift and go to state 13
    funcDeclar                     shift and go to state 14
    objDeclar                      shift and go to state 15
    andExpr                        shift and go to state 23
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 108

    (34) selectionStmt -> IF simpleExpr COL suite ELSE COL suite .

    NAME            reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    IF              reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    WHILE           reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    RETURN          reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    INPUT           reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    PRINT           reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    LINE_COMMENT    reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    DEF             reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    CLASS           reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NOT             reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NUMBER          reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    $end            reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    ELSE            reduce using rule 34 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)


state 109

    (20) funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .

    NAME            reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    IF              reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    WHILE           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    RETURN          reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    INPUT           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    PRINT           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    LINE_COMMENT    reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    DEF             reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    CLASS           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NOT             reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NUMBER          reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    $end            reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    ELSE            reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NAME in state 2 resolved as shift
WARNING: shift/reduce conflict for IF in state 2 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 2 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 2 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 2 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 2 resolved as shift
WARNING: shift/reduce conflict for LINE_COMMENT in state 2 resolved as shift
WARNING: shift/reduce conflict for DEF in state 2 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 2 resolved as shift
WARNING: shift/reduce conflict for NOT in state 2 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 2 resolved as shift
WARNING: shift/reduce conflict for POINT in state 16 resolved as shift
WARNING: shift/reduce conflict for POINT in state 46 resolved as shift
WARNING: shift/reduce conflict for POINT in state 68 resolved as shift
WARNING: shift/reduce conflict for POINT in state 70 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
