Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> codeLine
Rule 1     codeLine -> suite
Rule 2     suite -> stmt
Rule 3     suite -> stmt suite
Rule 4     stmt -> exprStmt
Rule 5     stmt -> declar
Rule 6     stmt -> call SEMCOL
Rule 7     stmt -> selectionStmt
Rule 8     stmt -> iterationStmt
Rule 9     stmt -> returnStmt SEMCOL
Rule 10    stmt -> inputStmt SEMCOL
Rule 11    stmt -> outputStmt SEMCOL
Rule 12    stmt -> commentLine
Rule 13    declar -> varDeclar SEMCOL
Rule 14    declar -> funcDeclar
Rule 15    declar -> objDeclar
Rule 16    varDeclar -> NAME ASSIGN STRING
Rule 17    varDeclar -> NAME ASSIGN exprStmt
Rule 18    varDeclar -> NAME ASSIGN inputStmt
Rule 19    funcDeclar -> DEF NAME LPARENT RPARENT COL suite
Rule 20    funcDeclar -> DEF NAME LPARENT params RPARENT COL suite
Rule 21    params -> paramsList
Rule 22    paramsList -> NAME COMA paramsList
Rule 23    paramsList -> NAME
Rule 24    objDeclar -> CLASS NAME COL suite
Rule 25    call -> NAME
Rule 26    call -> NAME POINT call
Rule 27    call -> NAME LPARENT RPARENT
Rule 28    call -> NAME LPARENT params RPARENT
Rule 29    call -> call POINT call
Rule 30    exprStmt -> simpleExpr
Rule 31    selectionStmt -> IF simpleExpr COL suite
Rule 32    selectionStmt -> IF simpleExpr COL suite ELSE COL suite
Rule 33    iterationStmt -> WHILE simpleExpr COL suite
Rule 34    returnStmt -> RETURN
Rule 35    returnStmt -> RETURN simpleExpr
Rule 36    simpleExpr -> simpleExpr OR andExpr
Rule 37    simpleExpr -> andExpr
Rule 38    andExpr -> andExpr AND unaryRelExpr
Rule 39    andExpr -> unaryRelExpr
Rule 40    unaryRelExpr -> NOT unaryRelExpr
Rule 41    unaryRelExpr -> relExpr
Rule 42    relExpr -> sumExpr relop sumExpr
Rule 43    relExpr -> sumExpr
Rule 44    relop -> LTE
Rule 45    relop -> LT
Rule 46    relop -> GTE
Rule 47    relop -> GT
Rule 48    relop -> EQ
Rule 49    relop -> NEQ
Rule 50    sumExpr -> sumExpr sumop term
Rule 51    sumExpr -> term
Rule 52    sumop -> SUM
Rule 53    sumop -> SUBST
Rule 54    term -> term mulop opElement
Rule 55    term -> opElement
Rule 56    opElement -> call
Rule 57    opElement -> NUMBER
Rule 58    mulop -> PROD
Rule 59    mulop -> DIV
Rule 60    inputStmt -> INPUT LPARENT RPARENT
Rule 61    outputStmt -> PRINT LPARENT STRING RPARENT
Rule 62    outputStmt -> PRINT LPARENT NAME RPARENT
Rule 63    commentLine -> LINE_COMMENT

Terminals, with rules where they appear

AND                  : 38
ASSIGN               : 16 17 18
CLASS                : 24
COL                  : 19 20 24 31 32 32 33
COMA                 : 22
DEF                  : 19 20
DIV                  : 59
ELSE                 : 32
EQ                   : 48
GT                   : 47
GTE                  : 46
IF                   : 31 32
INPUT                : 60
LINE_COMMENT         : 63
LPARENT              : 19 20 27 28 60 61 62
LT                   : 45
LTE                  : 44
NAME                 : 16 17 18 19 20 22 23 24 25 26 27 28 62
NEQ                  : 49
NOT                  : 40
NUMBER               : 57
OR                   : 36
POINT                : 26 29
PRINT                : 61 62
PROD                 : 58
RETURN               : 34 35
RPARENT              : 19 20 27 28 60 61 62
SEMCOL               : 6 9 10 11 13
STRING               : 16 61
SUBST                : 53
SUM                  : 52
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

andExpr              : 36 37 38
call                 : 6 26 29 29 56
codeLine             : 0
commentLine          : 12
declar               : 5
exprStmt             : 4 17
funcDeclar           : 14
inputStmt            : 10 18
iterationStmt        : 8
mulop                : 54
objDeclar            : 15
opElement            : 54 55
outputStmt           : 11
params               : 20 28
paramsList           : 21 22
relExpr              : 41
relop                : 42
returnStmt           : 9
selectionStmt        : 7
simpleExpr           : 30 31 32 33 35 36
stmt                 : 2 3
suite                : 1 3 19 20 24 31 32 32 33
sumExpr              : 42 42 43 50
sumop                : 50
term                 : 50 51 54
unaryRelExpr         : 38 39 40
varDeclar            : 13

Parsing method: LALR

state 0

    (0) S' -> . codeLine
    (1) codeLine -> . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    codeLine                       shift and go to state 1
    suite                          shift and go to state 2
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    simpleExpr                     shift and go to state 13
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 1

    (0) S' -> codeLine .



state 2

    (1) codeLine -> suite .

    $end            reduce using rule 1 (codeLine -> suite .)


state 3

    (2) suite -> stmt .
    (3) suite -> stmt . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for LINE_COMMENT resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    $end            reduce using rule 2 (suite -> stmt .)
    ELSE            reduce using rule 2 (suite -> stmt .)
    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

  ! NAME            [ reduce using rule 2 (suite -> stmt .) ]
  ! IF              [ reduce using rule 2 (suite -> stmt .) ]
  ! WHILE           [ reduce using rule 2 (suite -> stmt .) ]
  ! RETURN          [ reduce using rule 2 (suite -> stmt .) ]
  ! INPUT           [ reduce using rule 2 (suite -> stmt .) ]
  ! PRINT           [ reduce using rule 2 (suite -> stmt .) ]
  ! LINE_COMMENT    [ reduce using rule 2 (suite -> stmt .) ]
  ! DEF             [ reduce using rule 2 (suite -> stmt .) ]
  ! CLASS           [ reduce using rule 2 (suite -> stmt .) ]
  ! NOT             [ reduce using rule 2 (suite -> stmt .) ]
  ! NUMBER          [ reduce using rule 2 (suite -> stmt .) ]

    stmt                           shift and go to state 3
    suite                          shift and go to state 34
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    simpleExpr                     shift and go to state 13
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 4

    (4) stmt -> exprStmt .

    NAME            reduce using rule 4 (stmt -> exprStmt .)
    IF              reduce using rule 4 (stmt -> exprStmt .)
    WHILE           reduce using rule 4 (stmt -> exprStmt .)
    RETURN          reduce using rule 4 (stmt -> exprStmt .)
    INPUT           reduce using rule 4 (stmt -> exprStmt .)
    PRINT           reduce using rule 4 (stmt -> exprStmt .)
    LINE_COMMENT    reduce using rule 4 (stmt -> exprStmt .)
    DEF             reduce using rule 4 (stmt -> exprStmt .)
    CLASS           reduce using rule 4 (stmt -> exprStmt .)
    NOT             reduce using rule 4 (stmt -> exprStmt .)
    NUMBER          reduce using rule 4 (stmt -> exprStmt .)
    $end            reduce using rule 4 (stmt -> exprStmt .)
    ELSE            reduce using rule 4 (stmt -> exprStmt .)


state 5

    (5) stmt -> declar .

    NAME            reduce using rule 5 (stmt -> declar .)
    IF              reduce using rule 5 (stmt -> declar .)
    WHILE           reduce using rule 5 (stmt -> declar .)
    RETURN          reduce using rule 5 (stmt -> declar .)
    INPUT           reduce using rule 5 (stmt -> declar .)
    PRINT           reduce using rule 5 (stmt -> declar .)
    LINE_COMMENT    reduce using rule 5 (stmt -> declar .)
    DEF             reduce using rule 5 (stmt -> declar .)
    CLASS           reduce using rule 5 (stmt -> declar .)
    NOT             reduce using rule 5 (stmt -> declar .)
    NUMBER          reduce using rule 5 (stmt -> declar .)
    $end            reduce using rule 5 (stmt -> declar .)
    ELSE            reduce using rule 5 (stmt -> declar .)


state 6

    (6) stmt -> call . SEMCOL
    (29) call -> call . POINT call
    (56) opElement -> call .

    SEMCOL          shift and go to state 35
    POINT           shift and go to state 36
    PROD            reduce using rule 56 (opElement -> call .)
    DIV             reduce using rule 56 (opElement -> call .)
    LTE             reduce using rule 56 (opElement -> call .)
    LT              reduce using rule 56 (opElement -> call .)
    GTE             reduce using rule 56 (opElement -> call .)
    GT              reduce using rule 56 (opElement -> call .)
    EQ              reduce using rule 56 (opElement -> call .)
    NEQ             reduce using rule 56 (opElement -> call .)
    SUM             reduce using rule 56 (opElement -> call .)
    SUBST           reduce using rule 56 (opElement -> call .)
    AND             reduce using rule 56 (opElement -> call .)
    OR              reduce using rule 56 (opElement -> call .)
    NAME            reduce using rule 56 (opElement -> call .)
    IF              reduce using rule 56 (opElement -> call .)
    WHILE           reduce using rule 56 (opElement -> call .)
    RETURN          reduce using rule 56 (opElement -> call .)
    INPUT           reduce using rule 56 (opElement -> call .)
    PRINT           reduce using rule 56 (opElement -> call .)
    LINE_COMMENT    reduce using rule 56 (opElement -> call .)
    DEF             reduce using rule 56 (opElement -> call .)
    CLASS           reduce using rule 56 (opElement -> call .)
    NOT             reduce using rule 56 (opElement -> call .)
    NUMBER          reduce using rule 56 (opElement -> call .)
    $end            reduce using rule 56 (opElement -> call .)
    ELSE            reduce using rule 56 (opElement -> call .)


state 7

    (7) stmt -> selectionStmt .

    NAME            reduce using rule 7 (stmt -> selectionStmt .)
    IF              reduce using rule 7 (stmt -> selectionStmt .)
    WHILE           reduce using rule 7 (stmt -> selectionStmt .)
    RETURN          reduce using rule 7 (stmt -> selectionStmt .)
    INPUT           reduce using rule 7 (stmt -> selectionStmt .)
    PRINT           reduce using rule 7 (stmt -> selectionStmt .)
    LINE_COMMENT    reduce using rule 7 (stmt -> selectionStmt .)
    DEF             reduce using rule 7 (stmt -> selectionStmt .)
    CLASS           reduce using rule 7 (stmt -> selectionStmt .)
    NOT             reduce using rule 7 (stmt -> selectionStmt .)
    NUMBER          reduce using rule 7 (stmt -> selectionStmt .)
    $end            reduce using rule 7 (stmt -> selectionStmt .)
    ELSE            reduce using rule 7 (stmt -> selectionStmt .)


state 8

    (8) stmt -> iterationStmt .

    NAME            reduce using rule 8 (stmt -> iterationStmt .)
    IF              reduce using rule 8 (stmt -> iterationStmt .)
    WHILE           reduce using rule 8 (stmt -> iterationStmt .)
    RETURN          reduce using rule 8 (stmt -> iterationStmt .)
    INPUT           reduce using rule 8 (stmt -> iterationStmt .)
    PRINT           reduce using rule 8 (stmt -> iterationStmt .)
    LINE_COMMENT    reduce using rule 8 (stmt -> iterationStmt .)
    DEF             reduce using rule 8 (stmt -> iterationStmt .)
    CLASS           reduce using rule 8 (stmt -> iterationStmt .)
    NOT             reduce using rule 8 (stmt -> iterationStmt .)
    NUMBER          reduce using rule 8 (stmt -> iterationStmt .)
    $end            reduce using rule 8 (stmt -> iterationStmt .)
    ELSE            reduce using rule 8 (stmt -> iterationStmt .)


state 9

    (9) stmt -> returnStmt . SEMCOL

    SEMCOL          shift and go to state 37


state 10

    (10) stmt -> inputStmt . SEMCOL

    SEMCOL          shift and go to state 38


state 11

    (11) stmt -> outputStmt . SEMCOL

    SEMCOL          shift and go to state 39


state 12

    (12) stmt -> commentLine .

    NAME            reduce using rule 12 (stmt -> commentLine .)
    IF              reduce using rule 12 (stmt -> commentLine .)
    WHILE           reduce using rule 12 (stmt -> commentLine .)
    RETURN          reduce using rule 12 (stmt -> commentLine .)
    INPUT           reduce using rule 12 (stmt -> commentLine .)
    PRINT           reduce using rule 12 (stmt -> commentLine .)
    LINE_COMMENT    reduce using rule 12 (stmt -> commentLine .)
    DEF             reduce using rule 12 (stmt -> commentLine .)
    CLASS           reduce using rule 12 (stmt -> commentLine .)
    NOT             reduce using rule 12 (stmt -> commentLine .)
    NUMBER          reduce using rule 12 (stmt -> commentLine .)
    $end            reduce using rule 12 (stmt -> commentLine .)
    ELSE            reduce using rule 12 (stmt -> commentLine .)


state 13

    (30) exprStmt -> simpleExpr .
    (36) simpleExpr -> simpleExpr . OR andExpr

    NAME            reduce using rule 30 (exprStmt -> simpleExpr .)
    IF              reduce using rule 30 (exprStmt -> simpleExpr .)
    WHILE           reduce using rule 30 (exprStmt -> simpleExpr .)
    RETURN          reduce using rule 30 (exprStmt -> simpleExpr .)
    INPUT           reduce using rule 30 (exprStmt -> simpleExpr .)
    PRINT           reduce using rule 30 (exprStmt -> simpleExpr .)
    LINE_COMMENT    reduce using rule 30 (exprStmt -> simpleExpr .)
    DEF             reduce using rule 30 (exprStmt -> simpleExpr .)
    CLASS           reduce using rule 30 (exprStmt -> simpleExpr .)
    NOT             reduce using rule 30 (exprStmt -> simpleExpr .)
    NUMBER          reduce using rule 30 (exprStmt -> simpleExpr .)
    $end            reduce using rule 30 (exprStmt -> simpleExpr .)
    ELSE            reduce using rule 30 (exprStmt -> simpleExpr .)
    SEMCOL          reduce using rule 30 (exprStmt -> simpleExpr .)
    OR              shift and go to state 40


state 14

    (13) declar -> varDeclar . SEMCOL

    SEMCOL          shift and go to state 41


state 15

    (14) declar -> funcDeclar .

    NAME            reduce using rule 14 (declar -> funcDeclar .)
    IF              reduce using rule 14 (declar -> funcDeclar .)
    WHILE           reduce using rule 14 (declar -> funcDeclar .)
    RETURN          reduce using rule 14 (declar -> funcDeclar .)
    INPUT           reduce using rule 14 (declar -> funcDeclar .)
    PRINT           reduce using rule 14 (declar -> funcDeclar .)
    LINE_COMMENT    reduce using rule 14 (declar -> funcDeclar .)
    DEF             reduce using rule 14 (declar -> funcDeclar .)
    CLASS           reduce using rule 14 (declar -> funcDeclar .)
    NOT             reduce using rule 14 (declar -> funcDeclar .)
    NUMBER          reduce using rule 14 (declar -> funcDeclar .)
    $end            reduce using rule 14 (declar -> funcDeclar .)
    ELSE            reduce using rule 14 (declar -> funcDeclar .)


state 16

    (15) declar -> objDeclar .

    NAME            reduce using rule 15 (declar -> objDeclar .)
    IF              reduce using rule 15 (declar -> objDeclar .)
    WHILE           reduce using rule 15 (declar -> objDeclar .)
    RETURN          reduce using rule 15 (declar -> objDeclar .)
    INPUT           reduce using rule 15 (declar -> objDeclar .)
    PRINT           reduce using rule 15 (declar -> objDeclar .)
    LINE_COMMENT    reduce using rule 15 (declar -> objDeclar .)
    DEF             reduce using rule 15 (declar -> objDeclar .)
    CLASS           reduce using rule 15 (declar -> objDeclar .)
    NOT             reduce using rule 15 (declar -> objDeclar .)
    NUMBER          reduce using rule 15 (declar -> objDeclar .)
    $end            reduce using rule 15 (declar -> objDeclar .)
    ELSE            reduce using rule 15 (declar -> objDeclar .)


state 17

    (25) call -> NAME .
    (26) call -> NAME . POINT call
    (27) call -> NAME . LPARENT RPARENT
    (28) call -> NAME . LPARENT params RPARENT
    (16) varDeclar -> NAME . ASSIGN STRING
    (17) varDeclar -> NAME . ASSIGN exprStmt
    (18) varDeclar -> NAME . ASSIGN inputStmt

  ! shift/reduce conflict for POINT resolved as shift
    SEMCOL          reduce using rule 25 (call -> NAME .)
    PROD            reduce using rule 25 (call -> NAME .)
    DIV             reduce using rule 25 (call -> NAME .)
    LTE             reduce using rule 25 (call -> NAME .)
    LT              reduce using rule 25 (call -> NAME .)
    GTE             reduce using rule 25 (call -> NAME .)
    GT              reduce using rule 25 (call -> NAME .)
    EQ              reduce using rule 25 (call -> NAME .)
    NEQ             reduce using rule 25 (call -> NAME .)
    SUM             reduce using rule 25 (call -> NAME .)
    SUBST           reduce using rule 25 (call -> NAME .)
    AND             reduce using rule 25 (call -> NAME .)
    OR              reduce using rule 25 (call -> NAME .)
    NAME            reduce using rule 25 (call -> NAME .)
    IF              reduce using rule 25 (call -> NAME .)
    WHILE           reduce using rule 25 (call -> NAME .)
    RETURN          reduce using rule 25 (call -> NAME .)
    INPUT           reduce using rule 25 (call -> NAME .)
    PRINT           reduce using rule 25 (call -> NAME .)
    LINE_COMMENT    reduce using rule 25 (call -> NAME .)
    DEF             reduce using rule 25 (call -> NAME .)
    CLASS           reduce using rule 25 (call -> NAME .)
    NOT             reduce using rule 25 (call -> NAME .)
    NUMBER          reduce using rule 25 (call -> NAME .)
    $end            reduce using rule 25 (call -> NAME .)
    ELSE            reduce using rule 25 (call -> NAME .)
    POINT           shift and go to state 42
    LPARENT         shift and go to state 43
    ASSIGN          shift and go to state 44

  ! POINT           [ reduce using rule 25 (call -> NAME .) ]


state 18

    (31) selectionStmt -> IF . simpleExpr COL suite
    (32) selectionStmt -> IF . simpleExpr COL suite ELSE COL suite
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    simpleExpr                     shift and go to state 45
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 19

    (33) iterationStmt -> WHILE . simpleExpr COL suite
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    simpleExpr                     shift and go to state 48
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 20

    (34) returnStmt -> RETURN .
    (35) returnStmt -> RETURN . simpleExpr
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    SEMCOL          reduce using rule 34 (returnStmt -> RETURN .)
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    simpleExpr                     shift and go to state 49
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 21

    (60) inputStmt -> INPUT . LPARENT RPARENT

    LPARENT         shift and go to state 50


state 22

    (61) outputStmt -> PRINT . LPARENT STRING RPARENT
    (62) outputStmt -> PRINT . LPARENT NAME RPARENT

    LPARENT         shift and go to state 51


state 23

    (63) commentLine -> LINE_COMMENT .

    NAME            reduce using rule 63 (commentLine -> LINE_COMMENT .)
    IF              reduce using rule 63 (commentLine -> LINE_COMMENT .)
    WHILE           reduce using rule 63 (commentLine -> LINE_COMMENT .)
    RETURN          reduce using rule 63 (commentLine -> LINE_COMMENT .)
    INPUT           reduce using rule 63 (commentLine -> LINE_COMMENT .)
    PRINT           reduce using rule 63 (commentLine -> LINE_COMMENT .)
    LINE_COMMENT    reduce using rule 63 (commentLine -> LINE_COMMENT .)
    DEF             reduce using rule 63 (commentLine -> LINE_COMMENT .)
    CLASS           reduce using rule 63 (commentLine -> LINE_COMMENT .)
    NOT             reduce using rule 63 (commentLine -> LINE_COMMENT .)
    NUMBER          reduce using rule 63 (commentLine -> LINE_COMMENT .)
    $end            reduce using rule 63 (commentLine -> LINE_COMMENT .)
    ELSE            reduce using rule 63 (commentLine -> LINE_COMMENT .)


state 24

    (37) simpleExpr -> andExpr .
    (38) andExpr -> andExpr . AND unaryRelExpr

    OR              reduce using rule 37 (simpleExpr -> andExpr .)
    NAME            reduce using rule 37 (simpleExpr -> andExpr .)
    IF              reduce using rule 37 (simpleExpr -> andExpr .)
    WHILE           reduce using rule 37 (simpleExpr -> andExpr .)
    RETURN          reduce using rule 37 (simpleExpr -> andExpr .)
    INPUT           reduce using rule 37 (simpleExpr -> andExpr .)
    PRINT           reduce using rule 37 (simpleExpr -> andExpr .)
    LINE_COMMENT    reduce using rule 37 (simpleExpr -> andExpr .)
    DEF             reduce using rule 37 (simpleExpr -> andExpr .)
    CLASS           reduce using rule 37 (simpleExpr -> andExpr .)
    NOT             reduce using rule 37 (simpleExpr -> andExpr .)
    NUMBER          reduce using rule 37 (simpleExpr -> andExpr .)
    $end            reduce using rule 37 (simpleExpr -> andExpr .)
    ELSE            reduce using rule 37 (simpleExpr -> andExpr .)
    COL             reduce using rule 37 (simpleExpr -> andExpr .)
    SEMCOL          reduce using rule 37 (simpleExpr -> andExpr .)
    AND             shift and go to state 52


state 25

    (19) funcDeclar -> DEF . NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> DEF . NAME LPARENT params RPARENT COL suite

    NAME            shift and go to state 53


state 26

    (24) objDeclar -> CLASS . NAME COL suite

    NAME            shift and go to state 54


state 27

    (39) andExpr -> unaryRelExpr .

    AND             reduce using rule 39 (andExpr -> unaryRelExpr .)
    OR              reduce using rule 39 (andExpr -> unaryRelExpr .)
    NAME            reduce using rule 39 (andExpr -> unaryRelExpr .)
    IF              reduce using rule 39 (andExpr -> unaryRelExpr .)
    WHILE           reduce using rule 39 (andExpr -> unaryRelExpr .)
    RETURN          reduce using rule 39 (andExpr -> unaryRelExpr .)
    INPUT           reduce using rule 39 (andExpr -> unaryRelExpr .)
    PRINT           reduce using rule 39 (andExpr -> unaryRelExpr .)
    LINE_COMMENT    reduce using rule 39 (andExpr -> unaryRelExpr .)
    DEF             reduce using rule 39 (andExpr -> unaryRelExpr .)
    CLASS           reduce using rule 39 (andExpr -> unaryRelExpr .)
    NOT             reduce using rule 39 (andExpr -> unaryRelExpr .)
    NUMBER          reduce using rule 39 (andExpr -> unaryRelExpr .)
    $end            reduce using rule 39 (andExpr -> unaryRelExpr .)
    ELSE            reduce using rule 39 (andExpr -> unaryRelExpr .)
    COL             reduce using rule 39 (andExpr -> unaryRelExpr .)
    SEMCOL          reduce using rule 39 (andExpr -> unaryRelExpr .)


state 28

    (40) unaryRelExpr -> NOT . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    unaryRelExpr                   shift and go to state 55
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 29

    (41) unaryRelExpr -> relExpr .

    AND             reduce using rule 41 (unaryRelExpr -> relExpr .)
    OR              reduce using rule 41 (unaryRelExpr -> relExpr .)
    NAME            reduce using rule 41 (unaryRelExpr -> relExpr .)
    IF              reduce using rule 41 (unaryRelExpr -> relExpr .)
    WHILE           reduce using rule 41 (unaryRelExpr -> relExpr .)
    RETURN          reduce using rule 41 (unaryRelExpr -> relExpr .)
    INPUT           reduce using rule 41 (unaryRelExpr -> relExpr .)
    PRINT           reduce using rule 41 (unaryRelExpr -> relExpr .)
    LINE_COMMENT    reduce using rule 41 (unaryRelExpr -> relExpr .)
    DEF             reduce using rule 41 (unaryRelExpr -> relExpr .)
    CLASS           reduce using rule 41 (unaryRelExpr -> relExpr .)
    NOT             reduce using rule 41 (unaryRelExpr -> relExpr .)
    NUMBER          reduce using rule 41 (unaryRelExpr -> relExpr .)
    $end            reduce using rule 41 (unaryRelExpr -> relExpr .)
    ELSE            reduce using rule 41 (unaryRelExpr -> relExpr .)
    COL             reduce using rule 41 (unaryRelExpr -> relExpr .)
    SEMCOL          reduce using rule 41 (unaryRelExpr -> relExpr .)


state 30

    (42) relExpr -> sumExpr . relop sumExpr
    (43) relExpr -> sumExpr .
    (50) sumExpr -> sumExpr . sumop term
    (44) relop -> . LTE
    (45) relop -> . LT
    (46) relop -> . GTE
    (47) relop -> . GT
    (48) relop -> . EQ
    (49) relop -> . NEQ
    (52) sumop -> . SUM
    (53) sumop -> . SUBST

    AND             reduce using rule 43 (relExpr -> sumExpr .)
    OR              reduce using rule 43 (relExpr -> sumExpr .)
    NAME            reduce using rule 43 (relExpr -> sumExpr .)
    IF              reduce using rule 43 (relExpr -> sumExpr .)
    WHILE           reduce using rule 43 (relExpr -> sumExpr .)
    RETURN          reduce using rule 43 (relExpr -> sumExpr .)
    INPUT           reduce using rule 43 (relExpr -> sumExpr .)
    PRINT           reduce using rule 43 (relExpr -> sumExpr .)
    LINE_COMMENT    reduce using rule 43 (relExpr -> sumExpr .)
    DEF             reduce using rule 43 (relExpr -> sumExpr .)
    CLASS           reduce using rule 43 (relExpr -> sumExpr .)
    NOT             reduce using rule 43 (relExpr -> sumExpr .)
    NUMBER          reduce using rule 43 (relExpr -> sumExpr .)
    $end            reduce using rule 43 (relExpr -> sumExpr .)
    ELSE            reduce using rule 43 (relExpr -> sumExpr .)
    COL             reduce using rule 43 (relExpr -> sumExpr .)
    SEMCOL          reduce using rule 43 (relExpr -> sumExpr .)
    LTE             shift and go to state 58
    LT              shift and go to state 59
    GTE             shift and go to state 60
    GT              shift and go to state 61
    EQ              shift and go to state 62
    NEQ             shift and go to state 63
    SUM             shift and go to state 64
    SUBST           shift and go to state 65

    relop                          shift and go to state 56
    sumop                          shift and go to state 57

state 31

    (51) sumExpr -> term .
    (54) term -> term . mulop opElement
    (58) mulop -> . PROD
    (59) mulop -> . DIV

    LTE             reduce using rule 51 (sumExpr -> term .)
    LT              reduce using rule 51 (sumExpr -> term .)
    GTE             reduce using rule 51 (sumExpr -> term .)
    GT              reduce using rule 51 (sumExpr -> term .)
    EQ              reduce using rule 51 (sumExpr -> term .)
    NEQ             reduce using rule 51 (sumExpr -> term .)
    SUM             reduce using rule 51 (sumExpr -> term .)
    SUBST           reduce using rule 51 (sumExpr -> term .)
    AND             reduce using rule 51 (sumExpr -> term .)
    OR              reduce using rule 51 (sumExpr -> term .)
    NAME            reduce using rule 51 (sumExpr -> term .)
    IF              reduce using rule 51 (sumExpr -> term .)
    WHILE           reduce using rule 51 (sumExpr -> term .)
    RETURN          reduce using rule 51 (sumExpr -> term .)
    INPUT           reduce using rule 51 (sumExpr -> term .)
    PRINT           reduce using rule 51 (sumExpr -> term .)
    LINE_COMMENT    reduce using rule 51 (sumExpr -> term .)
    DEF             reduce using rule 51 (sumExpr -> term .)
    CLASS           reduce using rule 51 (sumExpr -> term .)
    NOT             reduce using rule 51 (sumExpr -> term .)
    NUMBER          reduce using rule 51 (sumExpr -> term .)
    $end            reduce using rule 51 (sumExpr -> term .)
    ELSE            reduce using rule 51 (sumExpr -> term .)
    COL             reduce using rule 51 (sumExpr -> term .)
    SEMCOL          reduce using rule 51 (sumExpr -> term .)
    PROD            shift and go to state 67
    DIV             shift and go to state 68

    mulop                          shift and go to state 66

state 32

    (55) term -> opElement .

    PROD            reduce using rule 55 (term -> opElement .)
    DIV             reduce using rule 55 (term -> opElement .)
    LTE             reduce using rule 55 (term -> opElement .)
    LT              reduce using rule 55 (term -> opElement .)
    GTE             reduce using rule 55 (term -> opElement .)
    GT              reduce using rule 55 (term -> opElement .)
    EQ              reduce using rule 55 (term -> opElement .)
    NEQ             reduce using rule 55 (term -> opElement .)
    SUM             reduce using rule 55 (term -> opElement .)
    SUBST           reduce using rule 55 (term -> opElement .)
    AND             reduce using rule 55 (term -> opElement .)
    OR              reduce using rule 55 (term -> opElement .)
    NAME            reduce using rule 55 (term -> opElement .)
    IF              reduce using rule 55 (term -> opElement .)
    WHILE           reduce using rule 55 (term -> opElement .)
    RETURN          reduce using rule 55 (term -> opElement .)
    INPUT           reduce using rule 55 (term -> opElement .)
    PRINT           reduce using rule 55 (term -> opElement .)
    LINE_COMMENT    reduce using rule 55 (term -> opElement .)
    DEF             reduce using rule 55 (term -> opElement .)
    CLASS           reduce using rule 55 (term -> opElement .)
    NOT             reduce using rule 55 (term -> opElement .)
    NUMBER          reduce using rule 55 (term -> opElement .)
    $end            reduce using rule 55 (term -> opElement .)
    ELSE            reduce using rule 55 (term -> opElement .)
    COL             reduce using rule 55 (term -> opElement .)
    SEMCOL          reduce using rule 55 (term -> opElement .)


state 33

    (57) opElement -> NUMBER .

    PROD            reduce using rule 57 (opElement -> NUMBER .)
    DIV             reduce using rule 57 (opElement -> NUMBER .)
    LTE             reduce using rule 57 (opElement -> NUMBER .)
    LT              reduce using rule 57 (opElement -> NUMBER .)
    GTE             reduce using rule 57 (opElement -> NUMBER .)
    GT              reduce using rule 57 (opElement -> NUMBER .)
    EQ              reduce using rule 57 (opElement -> NUMBER .)
    NEQ             reduce using rule 57 (opElement -> NUMBER .)
    SUM             reduce using rule 57 (opElement -> NUMBER .)
    SUBST           reduce using rule 57 (opElement -> NUMBER .)
    AND             reduce using rule 57 (opElement -> NUMBER .)
    OR              reduce using rule 57 (opElement -> NUMBER .)
    NAME            reduce using rule 57 (opElement -> NUMBER .)
    IF              reduce using rule 57 (opElement -> NUMBER .)
    WHILE           reduce using rule 57 (opElement -> NUMBER .)
    RETURN          reduce using rule 57 (opElement -> NUMBER .)
    INPUT           reduce using rule 57 (opElement -> NUMBER .)
    PRINT           reduce using rule 57 (opElement -> NUMBER .)
    LINE_COMMENT    reduce using rule 57 (opElement -> NUMBER .)
    DEF             reduce using rule 57 (opElement -> NUMBER .)
    CLASS           reduce using rule 57 (opElement -> NUMBER .)
    NOT             reduce using rule 57 (opElement -> NUMBER .)
    NUMBER          reduce using rule 57 (opElement -> NUMBER .)
    $end            reduce using rule 57 (opElement -> NUMBER .)
    ELSE            reduce using rule 57 (opElement -> NUMBER .)
    COL             reduce using rule 57 (opElement -> NUMBER .)
    SEMCOL          reduce using rule 57 (opElement -> NUMBER .)


state 34

    (3) suite -> stmt suite .

    $end            reduce using rule 3 (suite -> stmt suite .)
    ELSE            reduce using rule 3 (suite -> stmt suite .)
    NAME            reduce using rule 3 (suite -> stmt suite .)
    IF              reduce using rule 3 (suite -> stmt suite .)
    WHILE           reduce using rule 3 (suite -> stmt suite .)
    RETURN          reduce using rule 3 (suite -> stmt suite .)
    INPUT           reduce using rule 3 (suite -> stmt suite .)
    PRINT           reduce using rule 3 (suite -> stmt suite .)
    LINE_COMMENT    reduce using rule 3 (suite -> stmt suite .)
    DEF             reduce using rule 3 (suite -> stmt suite .)
    CLASS           reduce using rule 3 (suite -> stmt suite .)
    NOT             reduce using rule 3 (suite -> stmt suite .)
    NUMBER          reduce using rule 3 (suite -> stmt suite .)


state 35

    (6) stmt -> call SEMCOL .

    NAME            reduce using rule 6 (stmt -> call SEMCOL .)
    IF              reduce using rule 6 (stmt -> call SEMCOL .)
    WHILE           reduce using rule 6 (stmt -> call SEMCOL .)
    RETURN          reduce using rule 6 (stmt -> call SEMCOL .)
    INPUT           reduce using rule 6 (stmt -> call SEMCOL .)
    PRINT           reduce using rule 6 (stmt -> call SEMCOL .)
    LINE_COMMENT    reduce using rule 6 (stmt -> call SEMCOL .)
    DEF             reduce using rule 6 (stmt -> call SEMCOL .)
    CLASS           reduce using rule 6 (stmt -> call SEMCOL .)
    NOT             reduce using rule 6 (stmt -> call SEMCOL .)
    NUMBER          reduce using rule 6 (stmt -> call SEMCOL .)
    $end            reduce using rule 6 (stmt -> call SEMCOL .)
    ELSE            reduce using rule 6 (stmt -> call SEMCOL .)


state 36

    (29) call -> call POINT . call
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NAME            shift and go to state 47

    call                           shift and go to state 69

state 37

    (9) stmt -> returnStmt SEMCOL .

    NAME            reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    IF              reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    WHILE           reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    RETURN          reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    INPUT           reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    PRINT           reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    DEF             reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    CLASS           reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    NOT             reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    NUMBER          reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    $end            reduce using rule 9 (stmt -> returnStmt SEMCOL .)
    ELSE            reduce using rule 9 (stmt -> returnStmt SEMCOL .)


state 38

    (10) stmt -> inputStmt SEMCOL .

    NAME            reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    IF              reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    WHILE           reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    RETURN          reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    INPUT           reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    PRINT           reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    DEF             reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    CLASS           reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    NOT             reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    NUMBER          reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    $end            reduce using rule 10 (stmt -> inputStmt SEMCOL .)
    ELSE            reduce using rule 10 (stmt -> inputStmt SEMCOL .)


state 39

    (11) stmt -> outputStmt SEMCOL .

    NAME            reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    IF              reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    WHILE           reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    RETURN          reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    INPUT           reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    PRINT           reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    LINE_COMMENT    reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    DEF             reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    CLASS           reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    NOT             reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    NUMBER          reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    $end            reduce using rule 11 (stmt -> outputStmt SEMCOL .)
    ELSE            reduce using rule 11 (stmt -> outputStmt SEMCOL .)


state 40

    (36) simpleExpr -> simpleExpr OR . andExpr
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    andExpr                        shift and go to state 70
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 41

    (13) declar -> varDeclar SEMCOL .

    NAME            reduce using rule 13 (declar -> varDeclar SEMCOL .)
    IF              reduce using rule 13 (declar -> varDeclar SEMCOL .)
    WHILE           reduce using rule 13 (declar -> varDeclar SEMCOL .)
    RETURN          reduce using rule 13 (declar -> varDeclar SEMCOL .)
    INPUT           reduce using rule 13 (declar -> varDeclar SEMCOL .)
    PRINT           reduce using rule 13 (declar -> varDeclar SEMCOL .)
    LINE_COMMENT    reduce using rule 13 (declar -> varDeclar SEMCOL .)
    DEF             reduce using rule 13 (declar -> varDeclar SEMCOL .)
    CLASS           reduce using rule 13 (declar -> varDeclar SEMCOL .)
    NOT             reduce using rule 13 (declar -> varDeclar SEMCOL .)
    NUMBER          reduce using rule 13 (declar -> varDeclar SEMCOL .)
    $end            reduce using rule 13 (declar -> varDeclar SEMCOL .)
    ELSE            reduce using rule 13 (declar -> varDeclar SEMCOL .)


state 42

    (26) call -> NAME POINT . call
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NAME            shift and go to state 47

    call                           shift and go to state 71

state 43

    (27) call -> NAME LPARENT . RPARENT
    (28) call -> NAME LPARENT . params RPARENT
    (21) params -> . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    RPARENT         shift and go to state 73
    NAME            shift and go to state 72

    params                         shift and go to state 74
    paramsList                     shift and go to state 75

state 44

    (16) varDeclar -> NAME ASSIGN . STRING
    (17) varDeclar -> NAME ASSIGN . exprStmt
    (18) varDeclar -> NAME ASSIGN . inputStmt
    (30) exprStmt -> . simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    STRING          shift and go to state 76
    INPUT           shift and go to state 21
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    exprStmt                       shift and go to state 77
    inputStmt                      shift and go to state 78
    simpleExpr                     shift and go to state 13
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 45

    (31) selectionStmt -> IF simpleExpr . COL suite
    (32) selectionStmt -> IF simpleExpr . COL suite ELSE COL suite
    (36) simpleExpr -> simpleExpr . OR andExpr

    COL             shift and go to state 79
    OR              shift and go to state 40


state 46

    (56) opElement -> call .
    (29) call -> call . POINT call

    PROD            reduce using rule 56 (opElement -> call .)
    DIV             reduce using rule 56 (opElement -> call .)
    LTE             reduce using rule 56 (opElement -> call .)
    LT              reduce using rule 56 (opElement -> call .)
    GTE             reduce using rule 56 (opElement -> call .)
    GT              reduce using rule 56 (opElement -> call .)
    EQ              reduce using rule 56 (opElement -> call .)
    NEQ             reduce using rule 56 (opElement -> call .)
    SUM             reduce using rule 56 (opElement -> call .)
    SUBST           reduce using rule 56 (opElement -> call .)
    AND             reduce using rule 56 (opElement -> call .)
    COL             reduce using rule 56 (opElement -> call .)
    OR              reduce using rule 56 (opElement -> call .)
    SEMCOL          reduce using rule 56 (opElement -> call .)
    NAME            reduce using rule 56 (opElement -> call .)
    IF              reduce using rule 56 (opElement -> call .)
    WHILE           reduce using rule 56 (opElement -> call .)
    RETURN          reduce using rule 56 (opElement -> call .)
    INPUT           reduce using rule 56 (opElement -> call .)
    PRINT           reduce using rule 56 (opElement -> call .)
    LINE_COMMENT    reduce using rule 56 (opElement -> call .)
    DEF             reduce using rule 56 (opElement -> call .)
    CLASS           reduce using rule 56 (opElement -> call .)
    NOT             reduce using rule 56 (opElement -> call .)
    NUMBER          reduce using rule 56 (opElement -> call .)
    $end            reduce using rule 56 (opElement -> call .)
    ELSE            reduce using rule 56 (opElement -> call .)
    POINT           shift and go to state 36


state 47

    (25) call -> NAME .
    (26) call -> NAME . POINT call
    (27) call -> NAME . LPARENT RPARENT
    (28) call -> NAME . LPARENT params RPARENT

  ! shift/reduce conflict for POINT resolved as shift
    PROD            reduce using rule 25 (call -> NAME .)
    DIV             reduce using rule 25 (call -> NAME .)
    LTE             reduce using rule 25 (call -> NAME .)
    LT              reduce using rule 25 (call -> NAME .)
    GTE             reduce using rule 25 (call -> NAME .)
    GT              reduce using rule 25 (call -> NAME .)
    EQ              reduce using rule 25 (call -> NAME .)
    NEQ             reduce using rule 25 (call -> NAME .)
    SUM             reduce using rule 25 (call -> NAME .)
    SUBST           reduce using rule 25 (call -> NAME .)
    AND             reduce using rule 25 (call -> NAME .)
    COL             reduce using rule 25 (call -> NAME .)
    OR              reduce using rule 25 (call -> NAME .)
    SEMCOL          reduce using rule 25 (call -> NAME .)
    NAME            reduce using rule 25 (call -> NAME .)
    IF              reduce using rule 25 (call -> NAME .)
    WHILE           reduce using rule 25 (call -> NAME .)
    RETURN          reduce using rule 25 (call -> NAME .)
    INPUT           reduce using rule 25 (call -> NAME .)
    PRINT           reduce using rule 25 (call -> NAME .)
    LINE_COMMENT    reduce using rule 25 (call -> NAME .)
    DEF             reduce using rule 25 (call -> NAME .)
    CLASS           reduce using rule 25 (call -> NAME .)
    NOT             reduce using rule 25 (call -> NAME .)
    NUMBER          reduce using rule 25 (call -> NAME .)
    $end            reduce using rule 25 (call -> NAME .)
    ELSE            reduce using rule 25 (call -> NAME .)
    POINT           shift and go to state 42
    LPARENT         shift and go to state 43

  ! POINT           [ reduce using rule 25 (call -> NAME .) ]


state 48

    (33) iterationStmt -> WHILE simpleExpr . COL suite
    (36) simpleExpr -> simpleExpr . OR andExpr

    COL             shift and go to state 80
    OR              shift and go to state 40


state 49

    (35) returnStmt -> RETURN simpleExpr .
    (36) simpleExpr -> simpleExpr . OR andExpr

    SEMCOL          reduce using rule 35 (returnStmt -> RETURN simpleExpr .)
    OR              shift and go to state 40


state 50

    (60) inputStmt -> INPUT LPARENT . RPARENT

    RPARENT         shift and go to state 81


state 51

    (61) outputStmt -> PRINT LPARENT . STRING RPARENT
    (62) outputStmt -> PRINT LPARENT . NAME RPARENT

    STRING          shift and go to state 82
    NAME            shift and go to state 83


state 52

    (38) andExpr -> andExpr AND . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NOT             shift and go to state 28
    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    unaryRelExpr                   shift and go to state 84
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 53

    (19) funcDeclar -> DEF NAME . LPARENT RPARENT COL suite
    (20) funcDeclar -> DEF NAME . LPARENT params RPARENT COL suite

    LPARENT         shift and go to state 85


state 54

    (24) objDeclar -> CLASS NAME . COL suite

    COL             shift and go to state 86


state 55

    (40) unaryRelExpr -> NOT unaryRelExpr .

    AND             reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    OR              reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    NAME            reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    IF              reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    WHILE           reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    RETURN          reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    INPUT           reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    PRINT           reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    LINE_COMMENT    reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    DEF             reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    CLASS           reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    NOT             reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    NUMBER          reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    $end            reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    ELSE            reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    COL             reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)
    SEMCOL          reduce using rule 40 (unaryRelExpr -> NOT unaryRelExpr .)


state 56

    (42) relExpr -> sumExpr relop . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    sumExpr                        shift and go to state 87
    term                           shift and go to state 31
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 57

    (50) sumExpr -> sumExpr sumop . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    term                           shift and go to state 88
    opElement                      shift and go to state 32
    call                           shift and go to state 46

state 58

    (44) relop -> LTE .

    NUMBER          reduce using rule 44 (relop -> LTE .)
    NAME            reduce using rule 44 (relop -> LTE .)


state 59

    (45) relop -> LT .

    NUMBER          reduce using rule 45 (relop -> LT .)
    NAME            reduce using rule 45 (relop -> LT .)


state 60

    (46) relop -> GTE .

    NUMBER          reduce using rule 46 (relop -> GTE .)
    NAME            reduce using rule 46 (relop -> GTE .)


state 61

    (47) relop -> GT .

    NUMBER          reduce using rule 47 (relop -> GT .)
    NAME            reduce using rule 47 (relop -> GT .)


state 62

    (48) relop -> EQ .

    NUMBER          reduce using rule 48 (relop -> EQ .)
    NAME            reduce using rule 48 (relop -> EQ .)


state 63

    (49) relop -> NEQ .

    NUMBER          reduce using rule 49 (relop -> NEQ .)
    NAME            reduce using rule 49 (relop -> NEQ .)


state 64

    (52) sumop -> SUM .

    NUMBER          reduce using rule 52 (sumop -> SUM .)
    NAME            reduce using rule 52 (sumop -> SUM .)


state 65

    (53) sumop -> SUBST .

    NUMBER          reduce using rule 53 (sumop -> SUBST .)
    NAME            reduce using rule 53 (sumop -> SUBST .)


state 66

    (54) term -> term mulop . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call

    NUMBER          shift and go to state 33
    NAME            shift and go to state 47

    opElement                      shift and go to state 89
    call                           shift and go to state 46

state 67

    (58) mulop -> PROD .

    NUMBER          reduce using rule 58 (mulop -> PROD .)
    NAME            reduce using rule 58 (mulop -> PROD .)


state 68

    (59) mulop -> DIV .

    NUMBER          reduce using rule 59 (mulop -> DIV .)
    NAME            reduce using rule 59 (mulop -> DIV .)


state 69

    (29) call -> call POINT call .
    (29) call -> call . POINT call

  ! shift/reduce conflict for POINT resolved as shift
    SEMCOL          reduce using rule 29 (call -> call POINT call .)
    PROD            reduce using rule 29 (call -> call POINT call .)
    DIV             reduce using rule 29 (call -> call POINT call .)
    LTE             reduce using rule 29 (call -> call POINT call .)
    LT              reduce using rule 29 (call -> call POINT call .)
    GTE             reduce using rule 29 (call -> call POINT call .)
    GT              reduce using rule 29 (call -> call POINT call .)
    EQ              reduce using rule 29 (call -> call POINT call .)
    NEQ             reduce using rule 29 (call -> call POINT call .)
    SUM             reduce using rule 29 (call -> call POINT call .)
    SUBST           reduce using rule 29 (call -> call POINT call .)
    AND             reduce using rule 29 (call -> call POINT call .)
    OR              reduce using rule 29 (call -> call POINT call .)
    NAME            reduce using rule 29 (call -> call POINT call .)
    IF              reduce using rule 29 (call -> call POINT call .)
    WHILE           reduce using rule 29 (call -> call POINT call .)
    RETURN          reduce using rule 29 (call -> call POINT call .)
    INPUT           reduce using rule 29 (call -> call POINT call .)
    PRINT           reduce using rule 29 (call -> call POINT call .)
    LINE_COMMENT    reduce using rule 29 (call -> call POINT call .)
    DEF             reduce using rule 29 (call -> call POINT call .)
    CLASS           reduce using rule 29 (call -> call POINT call .)
    NOT             reduce using rule 29 (call -> call POINT call .)
    NUMBER          reduce using rule 29 (call -> call POINT call .)
    $end            reduce using rule 29 (call -> call POINT call .)
    ELSE            reduce using rule 29 (call -> call POINT call .)
    COL             reduce using rule 29 (call -> call POINT call .)
    POINT           shift and go to state 36

  ! POINT           [ reduce using rule 29 (call -> call POINT call .) ]


state 70

    (36) simpleExpr -> simpleExpr OR andExpr .
    (38) andExpr -> andExpr . AND unaryRelExpr

    OR              reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    NAME            reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    IF              reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    WHILE           reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    RETURN          reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    INPUT           reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    PRINT           reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    LINE_COMMENT    reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    DEF             reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    CLASS           reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    NOT             reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    NUMBER          reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    $end            reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    ELSE            reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    COL             reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    SEMCOL          reduce using rule 36 (simpleExpr -> simpleExpr OR andExpr .)
    AND             shift and go to state 52


state 71

    (26) call -> NAME POINT call .
    (29) call -> call . POINT call

  ! shift/reduce conflict for POINT resolved as shift
    SEMCOL          reduce using rule 26 (call -> NAME POINT call .)
    PROD            reduce using rule 26 (call -> NAME POINT call .)
    DIV             reduce using rule 26 (call -> NAME POINT call .)
    LTE             reduce using rule 26 (call -> NAME POINT call .)
    LT              reduce using rule 26 (call -> NAME POINT call .)
    GTE             reduce using rule 26 (call -> NAME POINT call .)
    GT              reduce using rule 26 (call -> NAME POINT call .)
    EQ              reduce using rule 26 (call -> NAME POINT call .)
    NEQ             reduce using rule 26 (call -> NAME POINT call .)
    SUM             reduce using rule 26 (call -> NAME POINT call .)
    SUBST           reduce using rule 26 (call -> NAME POINT call .)
    AND             reduce using rule 26 (call -> NAME POINT call .)
    OR              reduce using rule 26 (call -> NAME POINT call .)
    NAME            reduce using rule 26 (call -> NAME POINT call .)
    IF              reduce using rule 26 (call -> NAME POINT call .)
    WHILE           reduce using rule 26 (call -> NAME POINT call .)
    RETURN          reduce using rule 26 (call -> NAME POINT call .)
    INPUT           reduce using rule 26 (call -> NAME POINT call .)
    PRINT           reduce using rule 26 (call -> NAME POINT call .)
    LINE_COMMENT    reduce using rule 26 (call -> NAME POINT call .)
    DEF             reduce using rule 26 (call -> NAME POINT call .)
    CLASS           reduce using rule 26 (call -> NAME POINT call .)
    NOT             reduce using rule 26 (call -> NAME POINT call .)
    NUMBER          reduce using rule 26 (call -> NAME POINT call .)
    $end            reduce using rule 26 (call -> NAME POINT call .)
    ELSE            reduce using rule 26 (call -> NAME POINT call .)
    COL             reduce using rule 26 (call -> NAME POINT call .)
    POINT           shift and go to state 36

  ! POINT           [ reduce using rule 26 (call -> NAME POINT call .) ]


state 72

    (22) paramsList -> NAME . COMA paramsList
    (23) paramsList -> NAME .

    COMA            shift and go to state 90
    RPARENT         reduce using rule 23 (paramsList -> NAME .)


state 73

    (27) call -> NAME LPARENT RPARENT .

    SEMCOL          reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    POINT           reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    PROD            reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    DIV             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    LTE             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    LT              reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    GTE             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    GT              reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    EQ              reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    NEQ             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    SUM             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    SUBST           reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    AND             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    OR              reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    NAME            reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    IF              reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    WHILE           reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    RETURN          reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    INPUT           reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    PRINT           reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    LINE_COMMENT    reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    DEF             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    CLASS           reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    NOT             reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    NUMBER          reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    $end            reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    ELSE            reduce using rule 27 (call -> NAME LPARENT RPARENT .)
    COL             reduce using rule 27 (call -> NAME LPARENT RPARENT .)


state 74

    (28) call -> NAME LPARENT params . RPARENT

    RPARENT         shift and go to state 91


state 75

    (21) params -> paramsList .

    RPARENT         reduce using rule 21 (params -> paramsList .)


state 76

    (16) varDeclar -> NAME ASSIGN STRING .

    SEMCOL          reduce using rule 16 (varDeclar -> NAME ASSIGN STRING .)


state 77

    (17) varDeclar -> NAME ASSIGN exprStmt .

    SEMCOL          reduce using rule 17 (varDeclar -> NAME ASSIGN exprStmt .)


state 78

    (18) varDeclar -> NAME ASSIGN inputStmt .

    SEMCOL          reduce using rule 18 (varDeclar -> NAME ASSIGN inputStmt .)


state 79

    (31) selectionStmt -> IF simpleExpr COL . suite
    (32) selectionStmt -> IF simpleExpr COL . suite ELSE COL suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    simpleExpr                     shift and go to state 13
    suite                          shift and go to state 92
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 80

    (33) iterationStmt -> WHILE simpleExpr COL . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    simpleExpr                     shift and go to state 13
    suite                          shift and go to state 93
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 81

    (60) inputStmt -> INPUT LPARENT RPARENT .

    SEMCOL          reduce using rule 60 (inputStmt -> INPUT LPARENT RPARENT .)


state 82

    (61) outputStmt -> PRINT LPARENT STRING . RPARENT

    RPARENT         shift and go to state 94


state 83

    (62) outputStmt -> PRINT LPARENT NAME . RPARENT

    RPARENT         shift and go to state 95


state 84

    (38) andExpr -> andExpr AND unaryRelExpr .

    AND             reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    OR              reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    NAME            reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    IF              reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    WHILE           reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    RETURN          reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    INPUT           reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    PRINT           reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    LINE_COMMENT    reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    DEF             reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    CLASS           reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    NOT             reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    NUMBER          reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    $end            reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    ELSE            reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    COL             reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)
    SEMCOL          reduce using rule 38 (andExpr -> andExpr AND unaryRelExpr .)


state 85

    (19) funcDeclar -> DEF NAME LPARENT . RPARENT COL suite
    (20) funcDeclar -> DEF NAME LPARENT . params RPARENT COL suite
    (21) params -> . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    RPARENT         shift and go to state 96
    NAME            shift and go to state 72

    params                         shift and go to state 97
    paramsList                     shift and go to state 75

state 86

    (24) objDeclar -> CLASS NAME COL . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    suite                          shift and go to state 98
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    simpleExpr                     shift and go to state 13
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 87

    (42) relExpr -> sumExpr relop sumExpr .
    (50) sumExpr -> sumExpr . sumop term
    (52) sumop -> . SUM
    (53) sumop -> . SUBST

    AND             reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    OR              reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    NAME            reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    IF              reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    WHILE           reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    RETURN          reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    INPUT           reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    PRINT           reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    LINE_COMMENT    reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    DEF             reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    CLASS           reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    NOT             reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    NUMBER          reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    $end            reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    ELSE            reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    COL             reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    SEMCOL          reduce using rule 42 (relExpr -> sumExpr relop sumExpr .)
    SUM             shift and go to state 64
    SUBST           shift and go to state 65

    sumop                          shift and go to state 57

state 88

    (50) sumExpr -> sumExpr sumop term .
    (54) term -> term . mulop opElement
    (58) mulop -> . PROD
    (59) mulop -> . DIV

    LTE             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    LT              reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    GTE             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    GT              reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    EQ              reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    NEQ             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    SUM             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    SUBST           reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    AND             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    OR              reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    NAME            reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    IF              reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    WHILE           reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    RETURN          reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    INPUT           reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    PRINT           reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    LINE_COMMENT    reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    DEF             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    CLASS           reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    NOT             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    NUMBER          reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    $end            reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    ELSE            reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    COL             reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    SEMCOL          reduce using rule 50 (sumExpr -> sumExpr sumop term .)
    PROD            shift and go to state 67
    DIV             shift and go to state 68

    mulop                          shift and go to state 66

state 89

    (54) term -> term mulop opElement .

    PROD            reduce using rule 54 (term -> term mulop opElement .)
    DIV             reduce using rule 54 (term -> term mulop opElement .)
    LTE             reduce using rule 54 (term -> term mulop opElement .)
    LT              reduce using rule 54 (term -> term mulop opElement .)
    GTE             reduce using rule 54 (term -> term mulop opElement .)
    GT              reduce using rule 54 (term -> term mulop opElement .)
    EQ              reduce using rule 54 (term -> term mulop opElement .)
    NEQ             reduce using rule 54 (term -> term mulop opElement .)
    SUM             reduce using rule 54 (term -> term mulop opElement .)
    SUBST           reduce using rule 54 (term -> term mulop opElement .)
    AND             reduce using rule 54 (term -> term mulop opElement .)
    OR              reduce using rule 54 (term -> term mulop opElement .)
    NAME            reduce using rule 54 (term -> term mulop opElement .)
    IF              reduce using rule 54 (term -> term mulop opElement .)
    WHILE           reduce using rule 54 (term -> term mulop opElement .)
    RETURN          reduce using rule 54 (term -> term mulop opElement .)
    INPUT           reduce using rule 54 (term -> term mulop opElement .)
    PRINT           reduce using rule 54 (term -> term mulop opElement .)
    LINE_COMMENT    reduce using rule 54 (term -> term mulop opElement .)
    DEF             reduce using rule 54 (term -> term mulop opElement .)
    CLASS           reduce using rule 54 (term -> term mulop opElement .)
    NOT             reduce using rule 54 (term -> term mulop opElement .)
    NUMBER          reduce using rule 54 (term -> term mulop opElement .)
    $end            reduce using rule 54 (term -> term mulop opElement .)
    ELSE            reduce using rule 54 (term -> term mulop opElement .)
    COL             reduce using rule 54 (term -> term mulop opElement .)
    SEMCOL          reduce using rule 54 (term -> term mulop opElement .)


state 90

    (22) paramsList -> NAME COMA . paramsList
    (22) paramsList -> . NAME COMA paramsList
    (23) paramsList -> . NAME

    NAME            shift and go to state 72

    paramsList                     shift and go to state 99

state 91

    (28) call -> NAME LPARENT params RPARENT .

    SEMCOL          reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    POINT           reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    PROD            reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    DIV             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    LTE             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    LT              reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    GTE             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    GT              reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    EQ              reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    NEQ             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    SUM             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    SUBST           reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    AND             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    OR              reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    NAME            reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    IF              reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    WHILE           reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    RETURN          reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    INPUT           reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    PRINT           reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    LINE_COMMENT    reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    DEF             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    CLASS           reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    NOT             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    NUMBER          reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    $end            reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    ELSE            reduce using rule 28 (call -> NAME LPARENT params RPARENT .)
    COL             reduce using rule 28 (call -> NAME LPARENT params RPARENT .)


state 92

    (31) selectionStmt -> IF simpleExpr COL suite .
    (32) selectionStmt -> IF simpleExpr COL suite . ELSE COL suite

  ! shift/reduce conflict for ELSE resolved as shift
    NAME            reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    IF              reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    WHILE           reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    RETURN          reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    INPUT           reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    PRINT           reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    LINE_COMMENT    reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    DEF             reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    CLASS           reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    NOT             reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    NUMBER          reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    $end            reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .)
    ELSE            shift and go to state 100

  ! ELSE            [ reduce using rule 31 (selectionStmt -> IF simpleExpr COL suite .) ]


state 93

    (33) iterationStmt -> WHILE simpleExpr COL suite .

    NAME            reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    IF              reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    WHILE           reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    RETURN          reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    INPUT           reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    PRINT           reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    LINE_COMMENT    reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    DEF             reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    CLASS           reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    NOT             reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    NUMBER          reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    $end            reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)
    ELSE            reduce using rule 33 (iterationStmt -> WHILE simpleExpr COL suite .)


state 94

    (61) outputStmt -> PRINT LPARENT STRING RPARENT .

    SEMCOL          reduce using rule 61 (outputStmt -> PRINT LPARENT STRING RPARENT .)


state 95

    (62) outputStmt -> PRINT LPARENT NAME RPARENT .

    SEMCOL          reduce using rule 62 (outputStmt -> PRINT LPARENT NAME RPARENT .)


state 96

    (19) funcDeclar -> DEF NAME LPARENT RPARENT . COL suite

    COL             shift and go to state 101


state 97

    (20) funcDeclar -> DEF NAME LPARENT params . RPARENT COL suite

    RPARENT         shift and go to state 102


state 98

    (24) objDeclar -> CLASS NAME COL suite .

    NAME            reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    IF              reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    WHILE           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    RETURN          reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    INPUT           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    PRINT           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    LINE_COMMENT    reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    DEF             reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    CLASS           reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    NOT             reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    NUMBER          reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    $end            reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)
    ELSE            reduce using rule 24 (objDeclar -> CLASS NAME COL suite .)


state 99

    (22) paramsList -> NAME COMA paramsList .

    RPARENT         reduce using rule 22 (paramsList -> NAME COMA paramsList .)


state 100

    (32) selectionStmt -> IF simpleExpr COL suite ELSE . COL suite

    COL             shift and go to state 103


state 101

    (19) funcDeclar -> DEF NAME LPARENT RPARENT COL . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    suite                          shift and go to state 104
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    simpleExpr                     shift and go to state 13
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 102

    (20) funcDeclar -> DEF NAME LPARENT params RPARENT . COL suite

    COL             shift and go to state 105


state 103

    (32) selectionStmt -> IF simpleExpr COL suite ELSE COL . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    simpleExpr                     shift and go to state 13
    suite                          shift and go to state 106
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 104

    (19) funcDeclar -> DEF NAME LPARENT RPARENT COL suite .

    NAME            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    IF              reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    WHILE           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    RETURN          reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    INPUT           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    PRINT           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    LINE_COMMENT    reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    DEF             reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    CLASS           reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NOT             reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    NUMBER          reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    $end            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)
    ELSE            reduce using rule 19 (funcDeclar -> DEF NAME LPARENT RPARENT COL suite .)


state 105

    (20) funcDeclar -> DEF NAME LPARENT params RPARENT COL . suite
    (2) suite -> . stmt
    (3) suite -> . stmt suite
    (4) stmt -> . exprStmt
    (5) stmt -> . declar
    (6) stmt -> . call SEMCOL
    (7) stmt -> . selectionStmt
    (8) stmt -> . iterationStmt
    (9) stmt -> . returnStmt SEMCOL
    (10) stmt -> . inputStmt SEMCOL
    (11) stmt -> . outputStmt SEMCOL
    (12) stmt -> . commentLine
    (30) exprStmt -> . simpleExpr
    (13) declar -> . varDeclar SEMCOL
    (14) declar -> . funcDeclar
    (15) declar -> . objDeclar
    (25) call -> . NAME
    (26) call -> . NAME POINT call
    (27) call -> . NAME LPARENT RPARENT
    (28) call -> . NAME LPARENT params RPARENT
    (29) call -> . call POINT call
    (31) selectionStmt -> . IF simpleExpr COL suite
    (32) selectionStmt -> . IF simpleExpr COL suite ELSE COL suite
    (33) iterationStmt -> . WHILE simpleExpr COL suite
    (34) returnStmt -> . RETURN
    (35) returnStmt -> . RETURN simpleExpr
    (60) inputStmt -> . INPUT LPARENT RPARENT
    (61) outputStmt -> . PRINT LPARENT STRING RPARENT
    (62) outputStmt -> . PRINT LPARENT NAME RPARENT
    (63) commentLine -> . LINE_COMMENT
    (36) simpleExpr -> . simpleExpr OR andExpr
    (37) simpleExpr -> . andExpr
    (16) varDeclar -> . NAME ASSIGN STRING
    (17) varDeclar -> . NAME ASSIGN exprStmt
    (18) varDeclar -> . NAME ASSIGN inputStmt
    (19) funcDeclar -> . DEF NAME LPARENT RPARENT COL suite
    (20) funcDeclar -> . DEF NAME LPARENT params RPARENT COL suite
    (24) objDeclar -> . CLASS NAME COL suite
    (38) andExpr -> . andExpr AND unaryRelExpr
    (39) andExpr -> . unaryRelExpr
    (40) unaryRelExpr -> . NOT unaryRelExpr
    (41) unaryRelExpr -> . relExpr
    (42) relExpr -> . sumExpr relop sumExpr
    (43) relExpr -> . sumExpr
    (50) sumExpr -> . sumExpr sumop term
    (51) sumExpr -> . term
    (54) term -> . term mulop opElement
    (55) term -> . opElement
    (56) opElement -> . call
    (57) opElement -> . NUMBER

    NAME            shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    RETURN          shift and go to state 20
    INPUT           shift and go to state 21
    PRINT           shift and go to state 22
    LINE_COMMENT    shift and go to state 23
    DEF             shift and go to state 25
    CLASS           shift and go to state 26
    NOT             shift and go to state 28
    NUMBER          shift and go to state 33

    suite                          shift and go to state 107
    stmt                           shift and go to state 3
    exprStmt                       shift and go to state 4
    declar                         shift and go to state 5
    call                           shift and go to state 6
    selectionStmt                  shift and go to state 7
    iterationStmt                  shift and go to state 8
    returnStmt                     shift and go to state 9
    inputStmt                      shift and go to state 10
    outputStmt                     shift and go to state 11
    commentLine                    shift and go to state 12
    simpleExpr                     shift and go to state 13
    varDeclar                      shift and go to state 14
    funcDeclar                     shift and go to state 15
    objDeclar                      shift and go to state 16
    andExpr                        shift and go to state 24
    unaryRelExpr                   shift and go to state 27
    relExpr                        shift and go to state 29
    sumExpr                        shift and go to state 30
    term                           shift and go to state 31
    opElement                      shift and go to state 32

state 106

    (32) selectionStmt -> IF simpleExpr COL suite ELSE COL suite .

    NAME            reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    IF              reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    WHILE           reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    RETURN          reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    INPUT           reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    PRINT           reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    LINE_COMMENT    reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    DEF             reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    CLASS           reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NOT             reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    NUMBER          reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    $end            reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)
    ELSE            reduce using rule 32 (selectionStmt -> IF simpleExpr COL suite ELSE COL suite .)


state 107

    (20) funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .

    NAME            reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    IF              reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    WHILE           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    RETURN          reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    INPUT           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    PRINT           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    LINE_COMMENT    reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    DEF             reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    CLASS           reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NOT             reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    NUMBER          reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    $end            reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)
    ELSE            reduce using rule 20 (funcDeclar -> DEF NAME LPARENT params RPARENT COL suite .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NAME in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for LINE_COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for POINT in state 17 resolved as shift
WARNING: shift/reduce conflict for POINT in state 47 resolved as shift
WARNING: shift/reduce conflict for POINT in state 69 resolved as shift
WARNING: shift/reduce conflict for POINT in state 71 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 92 resolved as shift
