Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN
    SUM
    SUBST
    PROD
    DIV
    LPARENT
    RPARENT
    COL
    SEMCOL
    CLASS
    AND
    OR
    NOT

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME = expression
Rule 2     statement -> expression
Rule 3     expression -> expression + expression
Rule 4     expression -> expression - expression
Rule 5     expression -> expression * expression
Rule 6     expression -> expression / expression
Rule 7     expression -> - expression
Rule 8     expression -> ( expression )
Rule 9     expression -> NUMBER
Rule 10    expression -> STRING
Rule 11    expression -> LINE_COMMENT
Rule 12    expression -> POINT
Rule 13    expression -> EQ
Rule 14    expression -> NEQ
Rule 15    expression -> GT
Rule 16    expression -> GET
Rule 17    expression -> LT
Rule 18    expression -> LET
Rule 19    expression -> INPUT
Rule 20    expression -> PRINT
Rule 21    expression -> IF
Rule 22    expression -> ELSE
Rule 23    expression -> WHILE
Rule 24    expression -> NAME

Terminals, with rules where they appear

(                    : 8
)                    : 8
*                    : 5
+                    : 3
-                    : 4 7
/                    : 6
=                    : 1
AND                  : 
ASSIGN               : 
CLASS                : 
COL                  : 
DIV                  : 
ELSE                 : 22
EQ                   : 13
GET                  : 16
GT                   : 15
IF                   : 21
INPUT                : 19
LET                  : 18
LINE_COMMENT         : 11
LPARENT              : 
LT                   : 17
NAME                 : 1 24
NEQ                  : 14
NOT                  : 
NUMBER               : 9
OR                   : 
POINT                : 12
PRINT                : 20
PROD                 : 
RPARENT              : 
SEMCOL               : 
STRING               : 10
SUBST                : 
SUM                  : 
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3 4 4 5 5 6 6 7 8
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME = expression
    (2) statement -> . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    NAME            shift and go to state 2
    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20

    statement                      shift and go to state 1
    expression                     shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> NAME . = expression
    (24) expression -> NAME .

    =               shift and go to state 21
    +               reduce using rule 24 (expression -> NAME .)
    -               reduce using rule 24 (expression -> NAME .)
    *               reduce using rule 24 (expression -> NAME .)
    /               reduce using rule 24 (expression -> NAME .)
    $end            reduce using rule 24 (expression -> NAME .)


state 3

    (2) statement -> expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    $end            reduce using rule 2 (statement -> expression .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 4

    (7) expression -> - . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 26

state 5

    (8) expression -> ( . expression )
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 28

state 6

    (9) expression -> NUMBER .

    +               reduce using rule 9 (expression -> NUMBER .)
    -               reduce using rule 9 (expression -> NUMBER .)
    *               reduce using rule 9 (expression -> NUMBER .)
    /               reduce using rule 9 (expression -> NUMBER .)
    $end            reduce using rule 9 (expression -> NUMBER .)
    )               reduce using rule 9 (expression -> NUMBER .)


state 7

    (10) expression -> STRING .

    +               reduce using rule 10 (expression -> STRING .)
    -               reduce using rule 10 (expression -> STRING .)
    *               reduce using rule 10 (expression -> STRING .)
    /               reduce using rule 10 (expression -> STRING .)
    $end            reduce using rule 10 (expression -> STRING .)
    )               reduce using rule 10 (expression -> STRING .)


state 8

    (11) expression -> LINE_COMMENT .

    +               reduce using rule 11 (expression -> LINE_COMMENT .)
    -               reduce using rule 11 (expression -> LINE_COMMENT .)
    *               reduce using rule 11 (expression -> LINE_COMMENT .)
    /               reduce using rule 11 (expression -> LINE_COMMENT .)
    $end            reduce using rule 11 (expression -> LINE_COMMENT .)
    )               reduce using rule 11 (expression -> LINE_COMMENT .)


state 9

    (12) expression -> POINT .

    +               reduce using rule 12 (expression -> POINT .)
    -               reduce using rule 12 (expression -> POINT .)
    *               reduce using rule 12 (expression -> POINT .)
    /               reduce using rule 12 (expression -> POINT .)
    $end            reduce using rule 12 (expression -> POINT .)
    )               reduce using rule 12 (expression -> POINT .)


state 10

    (13) expression -> EQ .

    +               reduce using rule 13 (expression -> EQ .)
    -               reduce using rule 13 (expression -> EQ .)
    *               reduce using rule 13 (expression -> EQ .)
    /               reduce using rule 13 (expression -> EQ .)
    $end            reduce using rule 13 (expression -> EQ .)
    )               reduce using rule 13 (expression -> EQ .)


state 11

    (14) expression -> NEQ .

    +               reduce using rule 14 (expression -> NEQ .)
    -               reduce using rule 14 (expression -> NEQ .)
    *               reduce using rule 14 (expression -> NEQ .)
    /               reduce using rule 14 (expression -> NEQ .)
    $end            reduce using rule 14 (expression -> NEQ .)
    )               reduce using rule 14 (expression -> NEQ .)


state 12

    (15) expression -> GT .

    +               reduce using rule 15 (expression -> GT .)
    -               reduce using rule 15 (expression -> GT .)
    *               reduce using rule 15 (expression -> GT .)
    /               reduce using rule 15 (expression -> GT .)
    $end            reduce using rule 15 (expression -> GT .)
    )               reduce using rule 15 (expression -> GT .)


state 13

    (16) expression -> GET .

    +               reduce using rule 16 (expression -> GET .)
    -               reduce using rule 16 (expression -> GET .)
    *               reduce using rule 16 (expression -> GET .)
    /               reduce using rule 16 (expression -> GET .)
    $end            reduce using rule 16 (expression -> GET .)
    )               reduce using rule 16 (expression -> GET .)


state 14

    (17) expression -> LT .

    +               reduce using rule 17 (expression -> LT .)
    -               reduce using rule 17 (expression -> LT .)
    *               reduce using rule 17 (expression -> LT .)
    /               reduce using rule 17 (expression -> LT .)
    $end            reduce using rule 17 (expression -> LT .)
    )               reduce using rule 17 (expression -> LT .)


state 15

    (18) expression -> LET .

    +               reduce using rule 18 (expression -> LET .)
    -               reduce using rule 18 (expression -> LET .)
    *               reduce using rule 18 (expression -> LET .)
    /               reduce using rule 18 (expression -> LET .)
    $end            reduce using rule 18 (expression -> LET .)
    )               reduce using rule 18 (expression -> LET .)


state 16

    (19) expression -> INPUT .

    +               reduce using rule 19 (expression -> INPUT .)
    -               reduce using rule 19 (expression -> INPUT .)
    *               reduce using rule 19 (expression -> INPUT .)
    /               reduce using rule 19 (expression -> INPUT .)
    $end            reduce using rule 19 (expression -> INPUT .)
    )               reduce using rule 19 (expression -> INPUT .)


state 17

    (20) expression -> PRINT .

    +               reduce using rule 20 (expression -> PRINT .)
    -               reduce using rule 20 (expression -> PRINT .)
    *               reduce using rule 20 (expression -> PRINT .)
    /               reduce using rule 20 (expression -> PRINT .)
    $end            reduce using rule 20 (expression -> PRINT .)
    )               reduce using rule 20 (expression -> PRINT .)


state 18

    (21) expression -> IF .

    +               reduce using rule 21 (expression -> IF .)
    -               reduce using rule 21 (expression -> IF .)
    *               reduce using rule 21 (expression -> IF .)
    /               reduce using rule 21 (expression -> IF .)
    $end            reduce using rule 21 (expression -> IF .)
    )               reduce using rule 21 (expression -> IF .)


state 19

    (22) expression -> ELSE .

    +               reduce using rule 22 (expression -> ELSE .)
    -               reduce using rule 22 (expression -> ELSE .)
    *               reduce using rule 22 (expression -> ELSE .)
    /               reduce using rule 22 (expression -> ELSE .)
    $end            reduce using rule 22 (expression -> ELSE .)
    )               reduce using rule 22 (expression -> ELSE .)


state 20

    (23) expression -> WHILE .

    +               reduce using rule 23 (expression -> WHILE .)
    -               reduce using rule 23 (expression -> WHILE .)
    *               reduce using rule 23 (expression -> WHILE .)
    /               reduce using rule 23 (expression -> WHILE .)
    $end            reduce using rule 23 (expression -> WHILE .)
    )               reduce using rule 23 (expression -> WHILE .)


state 21

    (1) statement -> NAME = . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 29

state 22

    (3) expression -> expression + . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 30

state 23

    (4) expression -> expression - . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 31

state 24

    (5) expression -> expression * . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 32

state 25

    (6) expression -> expression / . expression
    (3) expression -> . expression + expression
    (4) expression -> . expression - expression
    (5) expression -> . expression * expression
    (6) expression -> . expression / expression
    (7) expression -> . - expression
    (8) expression -> . ( expression )
    (9) expression -> . NUMBER
    (10) expression -> . STRING
    (11) expression -> . LINE_COMMENT
    (12) expression -> . POINT
    (13) expression -> . EQ
    (14) expression -> . NEQ
    (15) expression -> . GT
    (16) expression -> . GET
    (17) expression -> . LT
    (18) expression -> . LET
    (19) expression -> . INPUT
    (20) expression -> . PRINT
    (21) expression -> . IF
    (22) expression -> . ELSE
    (23) expression -> . WHILE
    (24) expression -> . NAME

    -               shift and go to state 4
    (               shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    LINE_COMMENT    shift and go to state 8
    POINT           shift and go to state 9
    EQ              shift and go to state 10
    NEQ             shift and go to state 11
    GT              shift and go to state 12
    GET             shift and go to state 13
    LT              shift and go to state 14
    LET             shift and go to state 15
    INPUT           shift and go to state 16
    PRINT           shift and go to state 17
    IF              shift and go to state 18
    ELSE            shift and go to state 19
    WHILE           shift and go to state 20
    NAME            shift and go to state 27

    expression                     shift and go to state 33

state 26

    (7) expression -> - expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 7 (expression -> - expression .)
    -               reduce using rule 7 (expression -> - expression .)
    *               reduce using rule 7 (expression -> - expression .)
    /               reduce using rule 7 (expression -> - expression .)
    $end            reduce using rule 7 (expression -> - expression .)
    )               reduce using rule 7 (expression -> - expression .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 27

    (24) expression -> NAME .

    +               reduce using rule 24 (expression -> NAME .)
    -               reduce using rule 24 (expression -> NAME .)
    *               reduce using rule 24 (expression -> NAME .)
    /               reduce using rule 24 (expression -> NAME .)
    $end            reduce using rule 24 (expression -> NAME .)
    )               reduce using rule 24 (expression -> NAME .)


state 28

    (8) expression -> ( expression . )
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    )               shift and go to state 34
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 29

    (1) statement -> NAME = expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> NAME = expression .)
    +               shift and go to state 22
    -               shift and go to state 23
    *               shift and go to state 24
    /               shift and go to state 25


state 30

    (3) expression -> expression + expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 3 (expression -> expression + expression .)
    -               reduce using rule 3 (expression -> expression + expression .)
    $end            reduce using rule 3 (expression -> expression + expression .)
    )               reduce using rule 3 (expression -> expression + expression .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 3 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 31

    (4) expression -> expression - expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 4 (expression -> expression - expression .)
    -               reduce using rule 4 (expression -> expression - expression .)
    $end            reduce using rule 4 (expression -> expression - expression .)
    )               reduce using rule 4 (expression -> expression - expression .)
    *               shift and go to state 24
    /               shift and go to state 25

  ! *               [ reduce using rule 4 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]


state 32

    (5) expression -> expression * expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 5 (expression -> expression * expression .)
    -               reduce using rule 5 (expression -> expression * expression .)
    *               reduce using rule 5 (expression -> expression * expression .)
    /               reduce using rule 5 (expression -> expression * expression .)
    $end            reduce using rule 5 (expression -> expression * expression .)
    )               reduce using rule 5 (expression -> expression * expression .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 33

    (6) expression -> expression / expression .
    (3) expression -> expression . + expression
    (4) expression -> expression . - expression
    (5) expression -> expression . * expression
    (6) expression -> expression . / expression

    +               reduce using rule 6 (expression -> expression / expression .)
    -               reduce using rule 6 (expression -> expression / expression .)
    *               reduce using rule 6 (expression -> expression / expression .)
    /               reduce using rule 6 (expression -> expression / expression .)
    $end            reduce using rule 6 (expression -> expression / expression .)
    )               reduce using rule 6 (expression -> expression / expression .)

  ! +               [ shift and go to state 22 ]
  ! -               [ shift and go to state 23 ]
  ! *               [ shift and go to state 24 ]
  ! /               [ shift and go to state 25 ]


state 34

    (8) expression -> ( expression ) .

    +               reduce using rule 8 (expression -> ( expression ) .)
    -               reduce using rule 8 (expression -> ( expression ) .)
    *               reduce using rule 8 (expression -> ( expression ) .)
    /               reduce using rule 8 (expression -> ( expression ) .)
    $end            reduce using rule 8 (expression -> ( expression ) .)
    )               reduce using rule 8 (expression -> ( expression ) .)

